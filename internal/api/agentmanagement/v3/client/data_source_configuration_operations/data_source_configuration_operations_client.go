// Code generated by go-swagger; DO NOT EDIT.

package data_source_configuration_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data source configuration operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data source configuration operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data source configuration operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data source configuration operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAgentsIDDataSourceConfiguration(params *GetAgentsIDDataSourceConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAgentsIDDataSourceConfigurationOK, error)

	PutAgentsIDDataSourceConfiguration(params *PutAgentsIDDataSourceConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAgentsIDDataSourceConfigurationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAgentsIDDataSourceConfiguration gets data source configuration

Data source configuration is needed for interpreting the data received from an agent. It is crucial for Mindsphere to interpret the data sent by an agent. The data source configuration contains data sources and data points. Data sources are logical groups of data points, e.g. a sensor or a machine. Fetches data source configuration object.
*/
func (a *Client) GetAgentsIDDataSourceConfiguration(params *GetAgentsIDDataSourceConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAgentsIDDataSourceConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentsIDDataSourceConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAgentsIDDataSourceConfiguration",
		Method:             "GET",
		PathPattern:        "/agents/{id}/dataSourceConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentsIDDataSourceConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentsIDDataSourceConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAgentsIDDataSourceConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutAgentsIDDataSourceConfiguration updates data source configuration

Creates or updates data source configuration object.
*/
func (a *Client) PutAgentsIDDataSourceConfiguration(params *PutAgentsIDDataSourceConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAgentsIDDataSourceConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAgentsIDDataSourceConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAgentsIDDataSourceConfiguration",
		Method:             "PUT",
		PathPattern:        "/agents/{id}/dataSourceConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAgentsIDDataSourceConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAgentsIDDataSourceConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutAgentsIDDataSourceConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package assettype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// UpdateAssetTypeReader is a Reader for the UpdateAssetType structure.
type UpdateAssetTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAssetTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAssetTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAssetTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAssetTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAssetTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAssetTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateAssetTypePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAssetTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /assettypes/{id}] updateAssetType", response, response.Code())
	}
}

// NewUpdateAssetTypeOK creates a UpdateAssetTypeOK with default headers values
func NewUpdateAssetTypeOK() *UpdateAssetTypeOK {
	return &UpdateAssetTypeOK{}
}

/*
UpdateAssetTypeOK describes a response with status code 200, with default header values.

The asset type has been updated
*/
type UpdateAssetTypeOK struct {
	Payload *models.AssetTypeResource
}

// IsSuccess returns true when this update asset type o k response has a 2xx status code
func (o *UpdateAssetTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update asset type o k response has a 3xx status code
func (o *UpdateAssetTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type o k response has a 4xx status code
func (o *UpdateAssetTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asset type o k response has a 5xx status code
func (o *UpdateAssetTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type o k response a status code equal to that given
func (o *UpdateAssetTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update asset type o k response
func (o *UpdateAssetTypeOK) Code() int {
	return 200
}

func (o *UpdateAssetTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeOK %s", 200, payload)
}

func (o *UpdateAssetTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeOK %s", 200, payload)
}

func (o *UpdateAssetTypeOK) GetPayload() *models.AssetTypeResource {
	return o.Payload
}

func (o *UpdateAssetTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssetTypeResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypeBadRequest creates a UpdateAssetTypeBadRequest with default headers values
func NewUpdateAssetTypeBadRequest() *UpdateAssetTypeBadRequest {
	return &UpdateAssetTypeBadRequest{}
}

/*
UpdateAssetTypeBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UpdateAssetTypeBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type bad request response has a 2xx status code
func (o *UpdateAssetTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type bad request response has a 3xx status code
func (o *UpdateAssetTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type bad request response has a 4xx status code
func (o *UpdateAssetTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset type bad request response has a 5xx status code
func (o *UpdateAssetTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type bad request response a status code equal to that given
func (o *UpdateAssetTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update asset type bad request response
func (o *UpdateAssetTypeBadRequest) Code() int {
	return 400
}

func (o *UpdateAssetTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeBadRequest %s", 400, payload)
}

func (o *UpdateAssetTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeBadRequest %s", 400, payload)
}

func (o *UpdateAssetTypeBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypeUnauthorized creates a UpdateAssetTypeUnauthorized with default headers values
func NewUpdateAssetTypeUnauthorized() *UpdateAssetTypeUnauthorized {
	return &UpdateAssetTypeUnauthorized{}
}

/*
UpdateAssetTypeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UpdateAssetTypeUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type unauthorized response has a 2xx status code
func (o *UpdateAssetTypeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type unauthorized response has a 3xx status code
func (o *UpdateAssetTypeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type unauthorized response has a 4xx status code
func (o *UpdateAssetTypeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset type unauthorized response has a 5xx status code
func (o *UpdateAssetTypeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type unauthorized response a status code equal to that given
func (o *UpdateAssetTypeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update asset type unauthorized response
func (o *UpdateAssetTypeUnauthorized) Code() int {
	return 401
}

func (o *UpdateAssetTypeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeUnauthorized %s", 401, payload)
}

func (o *UpdateAssetTypeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeUnauthorized %s", 401, payload)
}

func (o *UpdateAssetTypeUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypeForbidden creates a UpdateAssetTypeForbidden with default headers values
func NewUpdateAssetTypeForbidden() *UpdateAssetTypeForbidden {
	return &UpdateAssetTypeForbidden{}
}

/*
UpdateAssetTypeForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type UpdateAssetTypeForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type forbidden response has a 2xx status code
func (o *UpdateAssetTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type forbidden response has a 3xx status code
func (o *UpdateAssetTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type forbidden response has a 4xx status code
func (o *UpdateAssetTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset type forbidden response has a 5xx status code
func (o *UpdateAssetTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type forbidden response a status code equal to that given
func (o *UpdateAssetTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update asset type forbidden response
func (o *UpdateAssetTypeForbidden) Code() int {
	return 403
}

func (o *UpdateAssetTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeForbidden %s", 403, payload)
}

func (o *UpdateAssetTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeForbidden %s", 403, payload)
}

func (o *UpdateAssetTypeForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypeNotFound creates a UpdateAssetTypeNotFound with default headers values
func NewUpdateAssetTypeNotFound() *UpdateAssetTypeNotFound {
	return &UpdateAssetTypeNotFound{}
}

/*
UpdateAssetTypeNotFound describes a response with status code 404, with default header values.

AssetType not found
*/
type UpdateAssetTypeNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type not found response has a 2xx status code
func (o *UpdateAssetTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type not found response has a 3xx status code
func (o *UpdateAssetTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type not found response has a 4xx status code
func (o *UpdateAssetTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset type not found response has a 5xx status code
func (o *UpdateAssetTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type not found response a status code equal to that given
func (o *UpdateAssetTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update asset type not found response
func (o *UpdateAssetTypeNotFound) Code() int {
	return 404
}

func (o *UpdateAssetTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeNotFound %s", 404, payload)
}

func (o *UpdateAssetTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeNotFound %s", 404, payload)
}

func (o *UpdateAssetTypeNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypePreconditionFailed creates a UpdateAssetTypePreconditionFailed with default headers values
func NewUpdateAssetTypePreconditionFailed() *UpdateAssetTypePreconditionFailed {
	return &UpdateAssetTypePreconditionFailed{}
}

/*
UpdateAssetTypePreconditionFailed describes a response with status code 412, with default header values.

AssetType is changed in the background
*/
type UpdateAssetTypePreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type precondition failed response has a 2xx status code
func (o *UpdateAssetTypePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type precondition failed response has a 3xx status code
func (o *UpdateAssetTypePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type precondition failed response has a 4xx status code
func (o *UpdateAssetTypePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset type precondition failed response has a 5xx status code
func (o *UpdateAssetTypePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset type precondition failed response a status code equal to that given
func (o *UpdateAssetTypePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update asset type precondition failed response
func (o *UpdateAssetTypePreconditionFailed) Code() int {
	return 412
}

func (o *UpdateAssetTypePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypePreconditionFailed %s", 412, payload)
}

func (o *UpdateAssetTypePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypePreconditionFailed %s", 412, payload)
}

func (o *UpdateAssetTypePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetTypeInternalServerError creates a UpdateAssetTypeInternalServerError with default headers values
func NewUpdateAssetTypeInternalServerError() *UpdateAssetTypeInternalServerError {
	return &UpdateAssetTypeInternalServerError{}
}

/*
UpdateAssetTypeInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type UpdateAssetTypeInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset type internal server error response has a 2xx status code
func (o *UpdateAssetTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset type internal server error response has a 3xx status code
func (o *UpdateAssetTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset type internal server error response has a 4xx status code
func (o *UpdateAssetTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asset type internal server error response has a 5xx status code
func (o *UpdateAssetTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update asset type internal server error response a status code equal to that given
func (o *UpdateAssetTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update asset type internal server error response
func (o *UpdateAssetTypeInternalServerError) Code() int {
	return 500
}

func (o *UpdateAssetTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeInternalServerError %s", 500, payload)
}

func (o *UpdateAssetTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assettypes/{id}][%d] updateAssetTypeInternalServerError %s", 500, payload)
}

func (o *UpdateAssetTypeInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

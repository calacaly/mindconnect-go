// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// ReplaceAssetReader is a Reader for the ReplaceAsset structure.
type ReplaceAssetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceAssetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceAssetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceAssetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplaceAssetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceAssetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceAssetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewReplaceAssetPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplaceAssetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewReplaceAssetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /assets/{id}] replaceAsset", response, response.Code())
	}
}

// NewReplaceAssetOK creates a ReplaceAssetOK with default headers values
func NewReplaceAssetOK() *ReplaceAssetOK {
	return &ReplaceAssetOK{}
}

/*
ReplaceAssetOK describes a response with status code 200, with default header values.

The asset is updated
*/
type ReplaceAssetOK struct {
	Payload *models.AssetResourceWithHierarchyPath
}

// IsSuccess returns true when this replace asset o k response has a 2xx status code
func (o *ReplaceAssetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace asset o k response has a 3xx status code
func (o *ReplaceAssetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset o k response has a 4xx status code
func (o *ReplaceAssetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace asset o k response has a 5xx status code
func (o *ReplaceAssetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset o k response a status code equal to that given
func (o *ReplaceAssetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace asset o k response
func (o *ReplaceAssetOK) Code() int {
	return 200
}

func (o *ReplaceAssetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetOK %s", 200, payload)
}

func (o *ReplaceAssetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetOK %s", 200, payload)
}

func (o *ReplaceAssetOK) GetPayload() *models.AssetResourceWithHierarchyPath {
	return o.Payload
}

func (o *ReplaceAssetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssetResourceWithHierarchyPath)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetBadRequest creates a ReplaceAssetBadRequest with default headers values
func NewReplaceAssetBadRequest() *ReplaceAssetBadRequest {
	return &ReplaceAssetBadRequest{}
}

/*
ReplaceAssetBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type ReplaceAssetBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset bad request response has a 2xx status code
func (o *ReplaceAssetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset bad request response has a 3xx status code
func (o *ReplaceAssetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset bad request response has a 4xx status code
func (o *ReplaceAssetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace asset bad request response has a 5xx status code
func (o *ReplaceAssetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset bad request response a status code equal to that given
func (o *ReplaceAssetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace asset bad request response
func (o *ReplaceAssetBadRequest) Code() int {
	return 400
}

func (o *ReplaceAssetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetBadRequest %s", 400, payload)
}

func (o *ReplaceAssetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetBadRequest %s", 400, payload)
}

func (o *ReplaceAssetBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetUnauthorized creates a ReplaceAssetUnauthorized with default headers values
func NewReplaceAssetUnauthorized() *ReplaceAssetUnauthorized {
	return &ReplaceAssetUnauthorized{}
}

/*
ReplaceAssetUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ReplaceAssetUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset unauthorized response has a 2xx status code
func (o *ReplaceAssetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset unauthorized response has a 3xx status code
func (o *ReplaceAssetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset unauthorized response has a 4xx status code
func (o *ReplaceAssetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace asset unauthorized response has a 5xx status code
func (o *ReplaceAssetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset unauthorized response a status code equal to that given
func (o *ReplaceAssetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the replace asset unauthorized response
func (o *ReplaceAssetUnauthorized) Code() int {
	return 401
}

func (o *ReplaceAssetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetUnauthorized %s", 401, payload)
}

func (o *ReplaceAssetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetUnauthorized %s", 401, payload)
}

func (o *ReplaceAssetUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetForbidden creates a ReplaceAssetForbidden with default headers values
func NewReplaceAssetForbidden() *ReplaceAssetForbidden {
	return &ReplaceAssetForbidden{}
}

/*
ReplaceAssetForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type ReplaceAssetForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset forbidden response has a 2xx status code
func (o *ReplaceAssetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset forbidden response has a 3xx status code
func (o *ReplaceAssetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset forbidden response has a 4xx status code
func (o *ReplaceAssetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace asset forbidden response has a 5xx status code
func (o *ReplaceAssetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset forbidden response a status code equal to that given
func (o *ReplaceAssetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the replace asset forbidden response
func (o *ReplaceAssetForbidden) Code() int {
	return 403
}

func (o *ReplaceAssetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetForbidden %s", 403, payload)
}

func (o *ReplaceAssetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetForbidden %s", 403, payload)
}

func (o *ReplaceAssetForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetNotFound creates a ReplaceAssetNotFound with default headers values
func NewReplaceAssetNotFound() *ReplaceAssetNotFound {
	return &ReplaceAssetNotFound{}
}

/*
ReplaceAssetNotFound describes a response with status code 404, with default header values.

Asset not found
*/
type ReplaceAssetNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset not found response has a 2xx status code
func (o *ReplaceAssetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset not found response has a 3xx status code
func (o *ReplaceAssetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset not found response has a 4xx status code
func (o *ReplaceAssetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace asset not found response has a 5xx status code
func (o *ReplaceAssetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset not found response a status code equal to that given
func (o *ReplaceAssetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace asset not found response
func (o *ReplaceAssetNotFound) Code() int {
	return 404
}

func (o *ReplaceAssetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetNotFound %s", 404, payload)
}

func (o *ReplaceAssetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetNotFound %s", 404, payload)
}

func (o *ReplaceAssetNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetPreconditionFailed creates a ReplaceAssetPreconditionFailed with default headers values
func NewReplaceAssetPreconditionFailed() *ReplaceAssetPreconditionFailed {
	return &ReplaceAssetPreconditionFailed{}
}

/*
ReplaceAssetPreconditionFailed describes a response with status code 412, with default header values.

Asset is changed in the background
*/
type ReplaceAssetPreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset precondition failed response has a 2xx status code
func (o *ReplaceAssetPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset precondition failed response has a 3xx status code
func (o *ReplaceAssetPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset precondition failed response has a 4xx status code
func (o *ReplaceAssetPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace asset precondition failed response has a 5xx status code
func (o *ReplaceAssetPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this replace asset precondition failed response a status code equal to that given
func (o *ReplaceAssetPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the replace asset precondition failed response
func (o *ReplaceAssetPreconditionFailed) Code() int {
	return 412
}

func (o *ReplaceAssetPreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetPreconditionFailed %s", 412, payload)
}

func (o *ReplaceAssetPreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetPreconditionFailed %s", 412, payload)
}

func (o *ReplaceAssetPreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetInternalServerError creates a ReplaceAssetInternalServerError with default headers values
func NewReplaceAssetInternalServerError() *ReplaceAssetInternalServerError {
	return &ReplaceAssetInternalServerError{}
}

/*
ReplaceAssetInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type ReplaceAssetInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset internal server error response has a 2xx status code
func (o *ReplaceAssetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset internal server error response has a 3xx status code
func (o *ReplaceAssetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset internal server error response has a 4xx status code
func (o *ReplaceAssetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace asset internal server error response has a 5xx status code
func (o *ReplaceAssetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this replace asset internal server error response a status code equal to that given
func (o *ReplaceAssetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the replace asset internal server error response
func (o *ReplaceAssetInternalServerError) Code() int {
	return 500
}

func (o *ReplaceAssetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetInternalServerError %s", 500, payload)
}

func (o *ReplaceAssetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetInternalServerError %s", 500, payload)
}

func (o *ReplaceAssetInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceAssetServiceUnavailable creates a ReplaceAssetServiceUnavailable with default headers values
func NewReplaceAssetServiceUnavailable() *ReplaceAssetServiceUnavailable {
	return &ReplaceAssetServiceUnavailable{}
}

/*
ReplaceAssetServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable, for more information see errorcode and message
*/
type ReplaceAssetServiceUnavailable struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace asset service unavailable response has a 2xx status code
func (o *ReplaceAssetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace asset service unavailable response has a 3xx status code
func (o *ReplaceAssetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace asset service unavailable response has a 4xx status code
func (o *ReplaceAssetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace asset service unavailable response has a 5xx status code
func (o *ReplaceAssetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this replace asset service unavailable response a status code equal to that given
func (o *ReplaceAssetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the replace asset service unavailable response
func (o *ReplaceAssetServiceUnavailable) Code() int {
	return 503
}

func (o *ReplaceAssetServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetServiceUnavailable %s", 503, payload)
}

func (o *ReplaceAssetServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /assets/{id}][%d] replaceAssetServiceUnavailable %s", 503, payload)
}

func (o *ReplaceAssetServiceUnavailable) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceAssetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

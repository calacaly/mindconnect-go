// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// UpdateAssetReader is a Reader for the UpdateAsset structure.
type UpdateAssetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAssetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAssetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAssetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAssetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAssetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAssetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateAssetPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAssetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateAssetServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /assets/{id}] updateAsset", response, response.Code())
	}
}

// NewUpdateAssetOK creates a UpdateAssetOK with default headers values
func NewUpdateAssetOK() *UpdateAssetOK {
	return &UpdateAssetOK{}
}

/*
UpdateAssetOK describes a response with status code 200, with default header values.

The asset is updated
*/
type UpdateAssetOK struct {
	Payload *models.AssetResourceWithHierarchyPath
}

// IsSuccess returns true when this update asset o k response has a 2xx status code
func (o *UpdateAssetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update asset o k response has a 3xx status code
func (o *UpdateAssetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset o k response has a 4xx status code
func (o *UpdateAssetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asset o k response has a 5xx status code
func (o *UpdateAssetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset o k response a status code equal to that given
func (o *UpdateAssetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update asset o k response
func (o *UpdateAssetOK) Code() int {
	return 200
}

func (o *UpdateAssetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetOK %s", 200, payload)
}

func (o *UpdateAssetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetOK %s", 200, payload)
}

func (o *UpdateAssetOK) GetPayload() *models.AssetResourceWithHierarchyPath {
	return o.Payload
}

func (o *UpdateAssetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssetResourceWithHierarchyPath)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetBadRequest creates a UpdateAssetBadRequest with default headers values
func NewUpdateAssetBadRequest() *UpdateAssetBadRequest {
	return &UpdateAssetBadRequest{}
}

/*
UpdateAssetBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UpdateAssetBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset bad request response has a 2xx status code
func (o *UpdateAssetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset bad request response has a 3xx status code
func (o *UpdateAssetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset bad request response has a 4xx status code
func (o *UpdateAssetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset bad request response has a 5xx status code
func (o *UpdateAssetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset bad request response a status code equal to that given
func (o *UpdateAssetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update asset bad request response
func (o *UpdateAssetBadRequest) Code() int {
	return 400
}

func (o *UpdateAssetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetBadRequest %s", 400, payload)
}

func (o *UpdateAssetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetBadRequest %s", 400, payload)
}

func (o *UpdateAssetBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetUnauthorized creates a UpdateAssetUnauthorized with default headers values
func NewUpdateAssetUnauthorized() *UpdateAssetUnauthorized {
	return &UpdateAssetUnauthorized{}
}

/*
UpdateAssetUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UpdateAssetUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset unauthorized response has a 2xx status code
func (o *UpdateAssetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset unauthorized response has a 3xx status code
func (o *UpdateAssetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset unauthorized response has a 4xx status code
func (o *UpdateAssetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset unauthorized response has a 5xx status code
func (o *UpdateAssetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset unauthorized response a status code equal to that given
func (o *UpdateAssetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update asset unauthorized response
func (o *UpdateAssetUnauthorized) Code() int {
	return 401
}

func (o *UpdateAssetUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetUnauthorized %s", 401, payload)
}

func (o *UpdateAssetUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetUnauthorized %s", 401, payload)
}

func (o *UpdateAssetUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetForbidden creates a UpdateAssetForbidden with default headers values
func NewUpdateAssetForbidden() *UpdateAssetForbidden {
	return &UpdateAssetForbidden{}
}

/*
UpdateAssetForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type UpdateAssetForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset forbidden response has a 2xx status code
func (o *UpdateAssetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset forbidden response has a 3xx status code
func (o *UpdateAssetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset forbidden response has a 4xx status code
func (o *UpdateAssetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset forbidden response has a 5xx status code
func (o *UpdateAssetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset forbidden response a status code equal to that given
func (o *UpdateAssetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update asset forbidden response
func (o *UpdateAssetForbidden) Code() int {
	return 403
}

func (o *UpdateAssetForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetForbidden %s", 403, payload)
}

func (o *UpdateAssetForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetForbidden %s", 403, payload)
}

func (o *UpdateAssetForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetNotFound creates a UpdateAssetNotFound with default headers values
func NewUpdateAssetNotFound() *UpdateAssetNotFound {
	return &UpdateAssetNotFound{}
}

/*
UpdateAssetNotFound describes a response with status code 404, with default header values.

Asset not found
*/
type UpdateAssetNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset not found response has a 2xx status code
func (o *UpdateAssetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset not found response has a 3xx status code
func (o *UpdateAssetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset not found response has a 4xx status code
func (o *UpdateAssetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset not found response has a 5xx status code
func (o *UpdateAssetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset not found response a status code equal to that given
func (o *UpdateAssetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update asset not found response
func (o *UpdateAssetNotFound) Code() int {
	return 404
}

func (o *UpdateAssetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetNotFound %s", 404, payload)
}

func (o *UpdateAssetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetNotFound %s", 404, payload)
}

func (o *UpdateAssetNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetPreconditionFailed creates a UpdateAssetPreconditionFailed with default headers values
func NewUpdateAssetPreconditionFailed() *UpdateAssetPreconditionFailed {
	return &UpdateAssetPreconditionFailed{}
}

/*
UpdateAssetPreconditionFailed describes a response with status code 412, with default header values.

Asset is changed in the background
*/
type UpdateAssetPreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset precondition failed response has a 2xx status code
func (o *UpdateAssetPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset precondition failed response has a 3xx status code
func (o *UpdateAssetPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset precondition failed response has a 4xx status code
func (o *UpdateAssetPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update asset precondition failed response has a 5xx status code
func (o *UpdateAssetPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update asset precondition failed response a status code equal to that given
func (o *UpdateAssetPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update asset precondition failed response
func (o *UpdateAssetPreconditionFailed) Code() int {
	return 412
}

func (o *UpdateAssetPreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetPreconditionFailed %s", 412, payload)
}

func (o *UpdateAssetPreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetPreconditionFailed %s", 412, payload)
}

func (o *UpdateAssetPreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetInternalServerError creates a UpdateAssetInternalServerError with default headers values
func NewUpdateAssetInternalServerError() *UpdateAssetInternalServerError {
	return &UpdateAssetInternalServerError{}
}

/*
UpdateAssetInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type UpdateAssetInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset internal server error response has a 2xx status code
func (o *UpdateAssetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset internal server error response has a 3xx status code
func (o *UpdateAssetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset internal server error response has a 4xx status code
func (o *UpdateAssetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asset internal server error response has a 5xx status code
func (o *UpdateAssetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update asset internal server error response a status code equal to that given
func (o *UpdateAssetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update asset internal server error response
func (o *UpdateAssetInternalServerError) Code() int {
	return 500
}

func (o *UpdateAssetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetInternalServerError %s", 500, payload)
}

func (o *UpdateAssetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetInternalServerError %s", 500, payload)
}

func (o *UpdateAssetInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAssetServiceUnavailable creates a UpdateAssetServiceUnavailable with default headers values
func NewUpdateAssetServiceUnavailable() *UpdateAssetServiceUnavailable {
	return &UpdateAssetServiceUnavailable{}
}

/*
UpdateAssetServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable, for more information see errorcode and message
*/
type UpdateAssetServiceUnavailable struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update asset service unavailable response has a 2xx status code
func (o *UpdateAssetServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update asset service unavailable response has a 3xx status code
func (o *UpdateAssetServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update asset service unavailable response has a 4xx status code
func (o *UpdateAssetServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update asset service unavailable response has a 5xx status code
func (o *UpdateAssetServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update asset service unavailable response a status code equal to that given
func (o *UpdateAssetServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update asset service unavailable response
func (o *UpdateAssetServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateAssetServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetServiceUnavailable %s", 503, payload)
}

func (o *UpdateAssetServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /assets/{id}][%d] updateAssetServiceUnavailable %s", 503, payload)
}

func (o *UpdateAssetServiceUnavailable) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAssetServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

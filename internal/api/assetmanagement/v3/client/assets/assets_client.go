// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new assets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new assets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new assets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for assets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationMergePatchJSON sets the Content-Type header to "application/merge-patch+json".
func WithContentTypeApplicationMergePatchJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/merge-patch+json"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationHalJSON sets the Accept header to "application/hal+json".
func WithAcceptApplicationHalJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndErrorJSON sets the Accept header to "application/vnd.error+json".
func WithAcceptApplicationVndErrorJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.error+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddAsset(params *AddAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAssetCreated, error)

	DeleteAsset(params *DeleteAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssetNoContent, error)

	DeleteAssetFileAssigment(params *DeleteAssetFileAssigmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssetFileAssigmentOK, error)

	GetAsset(params *GetAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssetOK, error)

	GetRootAsset(params *GetRootAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRootAssetOK, error)

	ListAssets(params *ListAssetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAssetsOK, error)

	MoveAsset(params *MoveAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveAssetOK, error)

	ReplaceAsset(params *ReplaceAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceAssetOK, error)

	SaveAssetFileAssignment(params *SaveAssetFileAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAssetFileAssignmentOK, error)

	UpdateAsset(params *UpdateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAssetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddAsset creates an asset

Creates a new asset with the provided content. Only instantiable types could be used.
*/
func (a *Client) AddAsset(params *AddAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAssetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAsset",
		Method:             "POST",
		PathPattern:        "/assets",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAssetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAsset deletes an asset

Deletes the given asset. It's not possible to delete an asset if it has children.
*/
func (a *Client) DeleteAsset(params *DeleteAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAsset",
		Method:             "DELETE",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAssetFileAssigment deletes a file assignment from an asset

Deletes a file assignment from an asset. If the asset's parent type has defined a file with the same key, the key will be displayed with the inherited value.
*/
func (a *Client) DeleteAssetFileAssigment(params *DeleteAssetFileAssigmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAssetFileAssigmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAssetFileAssigmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAssetFileAssigment",
		Method:             "DELETE",
		PathPattern:        "/assets/{id}/fileAssignments/{key}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAssetFileAssigmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAssetFileAssigmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAssetFileAssigment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAsset returns an asset

Read a single asset. All static properties of asset are returned.
*/
func (a *Client) GetAsset(params *GetAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAsset",
		Method:             "GET",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRootAsset returns the root asset of the user

Read the root asset of the user, from which the whole asset hierarchy can be rebuilt.
*/
func (a *Client) GetRootAsset(params *GetRootAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRootAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRootAsset",
		Method:             "GET",
		PathPattern:        "/assets/root",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRootAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAssets lists all available assets

List all assets available for the authenticated user. ## Filter Supports all basic fields and the 'hasType' filter which search for the assets with type that originated from the given asset type. # Examples Example: This filter searches for assets which type is exactly the given type: ``` { "typeId": "mandal.ship" } ``` Beyond the basic fields we can search for assets which type is inherited from the given type: ``` { "hasType": "mandal.ship" } ```
*/
func (a *Client) ListAssets(params *ListAssetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAssets",
		Method:             "GET",
		PathPattern:        "/assets",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAssetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MoveAsset moves an asset

Moves an asset (and all it's children) in the instance hierarchy
*/
func (a *Client) MoveAsset(params *MoveAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveAsset",
		Method:             "POST",
		PathPattern:        "/assets/{id}/move",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReplaceAsset updates an asset

Updates an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type
*/
func (a *Client) ReplaceAsset(params *ReplaceAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAsset",
		Method:             "PUT",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAssetFileAssignment saves an file assignment to an asset

Save a file assignment to a given asset
*/
func (a *Client) SaveAssetFileAssignment(params *SaveAssetFileAssignmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAssetFileAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAssetFileAssignmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAssetFileAssignment",
		Method:             "PUT",
		PathPattern:        "/assets/{id}/fileAssignments/{key}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveAssetFileAssignmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveAssetFileAssignmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveAssetFileAssignment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAsset patches an asset

Patch an asset with the provided content. Only values can be modified, asset's structure have to be modified in asset's type. Conforms to RFC 7396 - JSON merge Patch.
*/
func (a *Client) UpdateAsset(params *UpdateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAsset",
		Method:             "PATCH",
		PathPattern:        "/assets/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/merge-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// DeleteFileReader is a Reader for the DeleteFile structure.
type DeleteFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteFileNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewDeleteFilePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /files/{fileId}] deleteFile", response, response.Code())
	}
}

// NewDeleteFileNoContent creates a DeleteFileNoContent with default headers values
func NewDeleteFileNoContent() *DeleteFileNoContent {
	return &DeleteFileNoContent{}
}

/*
DeleteFileNoContent describes a response with status code 204, with default header values.

File has been successfully deleted
*/
type DeleteFileNoContent struct {
}

// IsSuccess returns true when this delete file no content response has a 2xx status code
func (o *DeleteFileNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete file no content response has a 3xx status code
func (o *DeleteFileNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file no content response has a 4xx status code
func (o *DeleteFileNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file no content response has a 5xx status code
func (o *DeleteFileNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file no content response a status code equal to that given
func (o *DeleteFileNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete file no content response
func (o *DeleteFileNoContent) Code() int {
	return 204
}

func (o *DeleteFileNoContent) Error() string {
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileNoContent", 204)
}

func (o *DeleteFileNoContent) String() string {
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileNoContent", 204)
}

func (o *DeleteFileNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteFileBadRequest creates a DeleteFileBadRequest with default headers values
func NewDeleteFileBadRequest() *DeleteFileBadRequest {
	return &DeleteFileBadRequest{}
}

/*
DeleteFileBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type DeleteFileBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file bad request response has a 2xx status code
func (o *DeleteFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file bad request response has a 3xx status code
func (o *DeleteFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file bad request response has a 4xx status code
func (o *DeleteFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file bad request response has a 5xx status code
func (o *DeleteFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file bad request response a status code equal to that given
func (o *DeleteFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete file bad request response
func (o *DeleteFileBadRequest) Code() int {
	return 400
}

func (o *DeleteFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileBadRequest %s", 400, payload)
}

func (o *DeleteFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileBadRequest %s", 400, payload)
}

func (o *DeleteFileBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileUnauthorized creates a DeleteFileUnauthorized with default headers values
func NewDeleteFileUnauthorized() *DeleteFileUnauthorized {
	return &DeleteFileUnauthorized{}
}

/*
DeleteFileUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type DeleteFileUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file unauthorized response has a 2xx status code
func (o *DeleteFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file unauthorized response has a 3xx status code
func (o *DeleteFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file unauthorized response has a 4xx status code
func (o *DeleteFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file unauthorized response has a 5xx status code
func (o *DeleteFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file unauthorized response a status code equal to that given
func (o *DeleteFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete file unauthorized response
func (o *DeleteFileUnauthorized) Code() int {
	return 401
}

func (o *DeleteFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileUnauthorized %s", 401, payload)
}

func (o *DeleteFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileUnauthorized %s", 401, payload)
}

func (o *DeleteFileUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileForbidden creates a DeleteFileForbidden with default headers values
func NewDeleteFileForbidden() *DeleteFileForbidden {
	return &DeleteFileForbidden{}
}

/*
DeleteFileForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type DeleteFileForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file forbidden response has a 2xx status code
func (o *DeleteFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file forbidden response has a 3xx status code
func (o *DeleteFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file forbidden response has a 4xx status code
func (o *DeleteFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file forbidden response has a 5xx status code
func (o *DeleteFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file forbidden response a status code equal to that given
func (o *DeleteFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete file forbidden response
func (o *DeleteFileForbidden) Code() int {
	return 403
}

func (o *DeleteFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileNotFound creates a DeleteFileNotFound with default headers values
func NewDeleteFileNotFound() *DeleteFileNotFound {
	return &DeleteFileNotFound{}
}

/*
DeleteFileNotFound describes a response with status code 404, with default header values.

File not found
*/
type DeleteFileNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file not found response has a 2xx status code
func (o *DeleteFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file not found response has a 3xx status code
func (o *DeleteFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file not found response has a 4xx status code
func (o *DeleteFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file not found response has a 5xx status code
func (o *DeleteFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file not found response a status code equal to that given
func (o *DeleteFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete file not found response
func (o *DeleteFileNotFound) Code() int {
	return 404
}

func (o *DeleteFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFilePreconditionFailed creates a DeleteFilePreconditionFailed with default headers values
func NewDeleteFilePreconditionFailed() *DeleteFilePreconditionFailed {
	return &DeleteFilePreconditionFailed{}
}

/*
DeleteFilePreconditionFailed describes a response with status code 412, with default header values.

File changed in the background
*/
type DeleteFilePreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file precondition failed response has a 2xx status code
func (o *DeleteFilePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file precondition failed response has a 3xx status code
func (o *DeleteFilePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file precondition failed response has a 4xx status code
func (o *DeleteFilePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file precondition failed response has a 5xx status code
func (o *DeleteFilePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file precondition failed response a status code equal to that given
func (o *DeleteFilePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the delete file precondition failed response
func (o *DeleteFilePreconditionFailed) Code() int {
	return 412
}

func (o *DeleteFilePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFilePreconditionFailed %s", 412, payload)
}

func (o *DeleteFilePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFilePreconditionFailed %s", 412, payload)
}

func (o *DeleteFilePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFilePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileInternalServerError creates a DeleteFileInternalServerError with default headers values
func NewDeleteFileInternalServerError() *DeleteFileInternalServerError {
	return &DeleteFileInternalServerError{}
}

/*
DeleteFileInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type DeleteFileInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete file internal server error response has a 2xx status code
func (o *DeleteFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file internal server error response has a 3xx status code
func (o *DeleteFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file internal server error response has a 4xx status code
func (o *DeleteFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file internal server error response has a 5xx status code
func (o *DeleteFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete file internal server error response a status code equal to that given
func (o *DeleteFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete file internal server error response
func (o *DeleteFileInternalServerError) Code() int {
	return 500
}

func (o *DeleteFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /files/{fileId}][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

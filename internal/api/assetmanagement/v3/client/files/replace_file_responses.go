// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// ReplaceFileReader is a Reader for the ReplaceFile structure.
type ReplaceFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplaceFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewReplaceFilePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplaceFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /files/{fileId}] replaceFile", response, response.Code())
	}
}

// NewReplaceFileOK creates a ReplaceFileOK with default headers values
func NewReplaceFileOK() *ReplaceFileOK {
	return &ReplaceFileOK{}
}

/*
ReplaceFileOK describes a response with status code 200, with default header values.

File has been successfully updated
*/
type ReplaceFileOK struct {
	Payload *models.FileMetadataResource
}

// IsSuccess returns true when this replace file o k response has a 2xx status code
func (o *ReplaceFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replace file o k response has a 3xx status code
func (o *ReplaceFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file o k response has a 4xx status code
func (o *ReplaceFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace file o k response has a 5xx status code
func (o *ReplaceFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file o k response a status code equal to that given
func (o *ReplaceFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replace file o k response
func (o *ReplaceFileOK) Code() int {
	return 200
}

func (o *ReplaceFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileOK %s", 200, payload)
}

func (o *ReplaceFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileOK %s", 200, payload)
}

func (o *ReplaceFileOK) GetPayload() *models.FileMetadataResource {
	return o.Payload
}

func (o *ReplaceFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FileMetadataResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFileBadRequest creates a ReplaceFileBadRequest with default headers values
func NewReplaceFileBadRequest() *ReplaceFileBadRequest {
	return &ReplaceFileBadRequest{}
}

/*
ReplaceFileBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type ReplaceFileBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file bad request response has a 2xx status code
func (o *ReplaceFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file bad request response has a 3xx status code
func (o *ReplaceFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file bad request response has a 4xx status code
func (o *ReplaceFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace file bad request response has a 5xx status code
func (o *ReplaceFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file bad request response a status code equal to that given
func (o *ReplaceFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replace file bad request response
func (o *ReplaceFileBadRequest) Code() int {
	return 400
}

func (o *ReplaceFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileBadRequest %s", 400, payload)
}

func (o *ReplaceFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileBadRequest %s", 400, payload)
}

func (o *ReplaceFileBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFileUnauthorized creates a ReplaceFileUnauthorized with default headers values
func NewReplaceFileUnauthorized() *ReplaceFileUnauthorized {
	return &ReplaceFileUnauthorized{}
}

/*
ReplaceFileUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ReplaceFileUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file unauthorized response has a 2xx status code
func (o *ReplaceFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file unauthorized response has a 3xx status code
func (o *ReplaceFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file unauthorized response has a 4xx status code
func (o *ReplaceFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace file unauthorized response has a 5xx status code
func (o *ReplaceFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file unauthorized response a status code equal to that given
func (o *ReplaceFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the replace file unauthorized response
func (o *ReplaceFileUnauthorized) Code() int {
	return 401
}

func (o *ReplaceFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileUnauthorized %s", 401, payload)
}

func (o *ReplaceFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileUnauthorized %s", 401, payload)
}

func (o *ReplaceFileUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFileForbidden creates a ReplaceFileForbidden with default headers values
func NewReplaceFileForbidden() *ReplaceFileForbidden {
	return &ReplaceFileForbidden{}
}

/*
ReplaceFileForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type ReplaceFileForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file forbidden response has a 2xx status code
func (o *ReplaceFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file forbidden response has a 3xx status code
func (o *ReplaceFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file forbidden response has a 4xx status code
func (o *ReplaceFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace file forbidden response has a 5xx status code
func (o *ReplaceFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file forbidden response a status code equal to that given
func (o *ReplaceFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the replace file forbidden response
func (o *ReplaceFileForbidden) Code() int {
	return 403
}

func (o *ReplaceFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileForbidden %s", 403, payload)
}

func (o *ReplaceFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileForbidden %s", 403, payload)
}

func (o *ReplaceFileForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFileNotFound creates a ReplaceFileNotFound with default headers values
func NewReplaceFileNotFound() *ReplaceFileNotFound {
	return &ReplaceFileNotFound{}
}

/*
ReplaceFileNotFound describes a response with status code 404, with default header values.

File not found
*/
type ReplaceFileNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file not found response has a 2xx status code
func (o *ReplaceFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file not found response has a 3xx status code
func (o *ReplaceFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file not found response has a 4xx status code
func (o *ReplaceFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace file not found response has a 5xx status code
func (o *ReplaceFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file not found response a status code equal to that given
func (o *ReplaceFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replace file not found response
func (o *ReplaceFileNotFound) Code() int {
	return 404
}

func (o *ReplaceFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileNotFound %s", 404, payload)
}

func (o *ReplaceFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileNotFound %s", 404, payload)
}

func (o *ReplaceFileNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFilePreconditionFailed creates a ReplaceFilePreconditionFailed with default headers values
func NewReplaceFilePreconditionFailed() *ReplaceFilePreconditionFailed {
	return &ReplaceFilePreconditionFailed{}
}

/*
ReplaceFilePreconditionFailed describes a response with status code 412, with default header values.

File is changed in the background
*/
type ReplaceFilePreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file precondition failed response has a 2xx status code
func (o *ReplaceFilePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file precondition failed response has a 3xx status code
func (o *ReplaceFilePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file precondition failed response has a 4xx status code
func (o *ReplaceFilePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this replace file precondition failed response has a 5xx status code
func (o *ReplaceFilePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this replace file precondition failed response a status code equal to that given
func (o *ReplaceFilePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the replace file precondition failed response
func (o *ReplaceFilePreconditionFailed) Code() int {
	return 412
}

func (o *ReplaceFilePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFilePreconditionFailed %s", 412, payload)
}

func (o *ReplaceFilePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFilePreconditionFailed %s", 412, payload)
}

func (o *ReplaceFilePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFilePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceFileInternalServerError creates a ReplaceFileInternalServerError with default headers values
func NewReplaceFileInternalServerError() *ReplaceFileInternalServerError {
	return &ReplaceFileInternalServerError{}
}

/*
ReplaceFileInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type ReplaceFileInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this replace file internal server error response has a 2xx status code
func (o *ReplaceFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replace file internal server error response has a 3xx status code
func (o *ReplaceFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replace file internal server error response has a 4xx status code
func (o *ReplaceFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this replace file internal server error response has a 5xx status code
func (o *ReplaceFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this replace file internal server error response a status code equal to that given
func (o *ReplaceFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the replace file internal server error response
func (o *ReplaceFileInternalServerError) Code() int {
	return 500
}

func (o *ReplaceFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileInternalServerError %s", 500, payload)
}

func (o *ReplaceFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /files/{fileId}][%d] replaceFileInternalServerError %s", 500, payload)
}

func (o *ReplaceFileInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ReplaceFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

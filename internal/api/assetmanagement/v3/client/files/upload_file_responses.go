// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// UploadFileReader is a Reader for the UploadFile structure.
type UploadFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUploadFileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUploadFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUploadFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUploadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /files] uploadFile", response, response.Code())
	}
}

// NewUploadFileCreated creates a UploadFileCreated with default headers values
func NewUploadFileCreated() *UploadFileCreated {
	return &UploadFileCreated{}
}

/*
UploadFileCreated describes a response with status code 201, with default header values.

File has been successfully uploaded
*/
type UploadFileCreated struct {

	/* URL of the created resource

	   Format: uri
	*/
	Location strfmt.URI

	Payload *models.FileMetadataResource
}

// IsSuccess returns true when this upload file created response has a 2xx status code
func (o *UploadFileCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload file created response has a 3xx status code
func (o *UploadFileCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file created response has a 4xx status code
func (o *UploadFileCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload file created response has a 5xx status code
func (o *UploadFileCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file created response a status code equal to that given
func (o *UploadFileCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the upload file created response
func (o *UploadFileCreated) Code() int {
	return 201
}

func (o *UploadFileCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileCreated %s", 201, payload)
}

func (o *UploadFileCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileCreated %s", 201, payload)
}

func (o *UploadFileCreated) GetPayload() *models.FileMetadataResource {
	return o.Payload
}

func (o *UploadFileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		vallocation, err := formats.Parse("uri", hdrLocation)
		if err != nil {
			return errors.InvalidType("Location", "header", "strfmt.URI", hdrLocation)
		}
		o.Location = *(vallocation.(*strfmt.URI))
	}

	o.Payload = new(models.FileMetadataResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileBadRequest creates a UploadFileBadRequest with default headers values
func NewUploadFileBadRequest() *UploadFileBadRequest {
	return &UploadFileBadRequest{}
}

/*
UploadFileBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UploadFileBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this upload file bad request response has a 2xx status code
func (o *UploadFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file bad request response has a 3xx status code
func (o *UploadFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file bad request response has a 4xx status code
func (o *UploadFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file bad request response has a 5xx status code
func (o *UploadFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file bad request response a status code equal to that given
func (o *UploadFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upload file bad request response
func (o *UploadFileBadRequest) Code() int {
	return 400
}

func (o *UploadFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileBadRequest %s", 400, payload)
}

func (o *UploadFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileBadRequest %s", 400, payload)
}

func (o *UploadFileBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UploadFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileUnauthorized creates a UploadFileUnauthorized with default headers values
func NewUploadFileUnauthorized() *UploadFileUnauthorized {
	return &UploadFileUnauthorized{}
}

/*
UploadFileUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UploadFileUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this upload file unauthorized response has a 2xx status code
func (o *UploadFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file unauthorized response has a 3xx status code
func (o *UploadFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file unauthorized response has a 4xx status code
func (o *UploadFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file unauthorized response has a 5xx status code
func (o *UploadFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file unauthorized response a status code equal to that given
func (o *UploadFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upload file unauthorized response
func (o *UploadFileUnauthorized) Code() int {
	return 401
}

func (o *UploadFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileUnauthorized %s", 401, payload)
}

func (o *UploadFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileUnauthorized %s", 401, payload)
}

func (o *UploadFileUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UploadFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileForbidden creates a UploadFileForbidden with default headers values
func NewUploadFileForbidden() *UploadFileForbidden {
	return &UploadFileForbidden{}
}

/*
UploadFileForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type UploadFileForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this upload file forbidden response has a 2xx status code
func (o *UploadFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file forbidden response has a 3xx status code
func (o *UploadFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file forbidden response has a 4xx status code
func (o *UploadFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upload file forbidden response has a 5xx status code
func (o *UploadFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upload file forbidden response a status code equal to that given
func (o *UploadFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upload file forbidden response
func (o *UploadFileForbidden) Code() int {
	return 403
}

func (o *UploadFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileForbidden %s", 403, payload)
}

func (o *UploadFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileForbidden %s", 403, payload)
}

func (o *UploadFileForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UploadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadFileInternalServerError creates a UploadFileInternalServerError with default headers values
func NewUploadFileInternalServerError() *UploadFileInternalServerError {
	return &UploadFileInternalServerError{}
}

/*
UploadFileInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type UploadFileInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this upload file internal server error response has a 2xx status code
func (o *UploadFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upload file internal server error response has a 3xx status code
func (o *UploadFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload file internal server error response has a 4xx status code
func (o *UploadFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload file internal server error response has a 5xx status code
func (o *UploadFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this upload file internal server error response a status code equal to that given
func (o *UploadFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the upload file internal server error response
func (o *UploadFileInternalServerError) Code() int {
	return 500
}

func (o *UploadFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileInternalServerError %s", 500, payload)
}

func (o *UploadFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /files][%d] uploadFileInternalServerError %s", 500, payload)
}

func (o *UploadFileInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UploadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

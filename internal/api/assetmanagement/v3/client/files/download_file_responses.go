// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// DownloadFileReader is a Reader for the DownloadFile structure.
type DownloadFileReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadFileOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewDownloadFileNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /files/{fileId}/file] downloadFile", response, response.Code())
	}
}

// NewDownloadFileOK creates a DownloadFileOK with default headers values
func NewDownloadFileOK(writer io.Writer) *DownloadFileOK {
	return &DownloadFileOK{

		Payload: writer,
	}
}

/*
DownloadFileOK describes a response with status code 200, with default header values.

Returns the file
*/
type DownloadFileOK struct {

	/* The uploaded file resource's media type

	   Format: Media type
	*/
	ContentType string

	Payload io.Writer
}

// IsSuccess returns true when this download file o k response has a 2xx status code
func (o *DownloadFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download file o k response has a 3xx status code
func (o *DownloadFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file o k response has a 4xx status code
func (o *DownloadFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download file o k response has a 5xx status code
func (o *DownloadFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download file o k response a status code equal to that given
func (o *DownloadFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download file o k response
func (o *DownloadFileOK) Code() int {
	return 200
}

func (o *DownloadFileOK) Error() string {
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileOK", 200)
}

func (o *DownloadFileOK) String() string {
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileOK", 200)
}

func (o *DownloadFileOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileUnauthorized creates a DownloadFileUnauthorized with default headers values
func NewDownloadFileUnauthorized() *DownloadFileUnauthorized {
	return &DownloadFileUnauthorized{}
}

/*
DownloadFileUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type DownloadFileUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download file unauthorized response has a 2xx status code
func (o *DownloadFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file unauthorized response has a 3xx status code
func (o *DownloadFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file unauthorized response has a 4xx status code
func (o *DownloadFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file unauthorized response has a 5xx status code
func (o *DownloadFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download file unauthorized response a status code equal to that given
func (o *DownloadFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download file unauthorized response
func (o *DownloadFileUnauthorized) Code() int {
	return 401
}

func (o *DownloadFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileUnauthorized %s", 401, payload)
}

func (o *DownloadFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileUnauthorized %s", 401, payload)
}

func (o *DownloadFileUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileForbidden creates a DownloadFileForbidden with default headers values
func NewDownloadFileForbidden() *DownloadFileForbidden {
	return &DownloadFileForbidden{}
}

/*
DownloadFileForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type DownloadFileForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download file forbidden response has a 2xx status code
func (o *DownloadFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file forbidden response has a 3xx status code
func (o *DownloadFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file forbidden response has a 4xx status code
func (o *DownloadFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file forbidden response has a 5xx status code
func (o *DownloadFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this download file forbidden response a status code equal to that given
func (o *DownloadFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the download file forbidden response
func (o *DownloadFileForbidden) Code() int {
	return 403
}

func (o *DownloadFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileForbidden %s", 403, payload)
}

func (o *DownloadFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileForbidden %s", 403, payload)
}

func (o *DownloadFileForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileNotFound creates a DownloadFileNotFound with default headers values
func NewDownloadFileNotFound() *DownloadFileNotFound {
	return &DownloadFileNotFound{}
}

/*
DownloadFileNotFound describes a response with status code 404, with default header values.

File not found
*/
type DownloadFileNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download file not found response has a 2xx status code
func (o *DownloadFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file not found response has a 3xx status code
func (o *DownloadFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file not found response has a 4xx status code
func (o *DownloadFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file not found response has a 5xx status code
func (o *DownloadFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download file not found response a status code equal to that given
func (o *DownloadFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download file not found response
func (o *DownloadFileNotFound) Code() int {
	return 404
}

func (o *DownloadFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileNotFound %s", 404, payload)
}

func (o *DownloadFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileNotFound %s", 404, payload)
}

func (o *DownloadFileNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileNotAcceptable creates a DownloadFileNotAcceptable with default headers values
func NewDownloadFileNotAcceptable() *DownloadFileNotAcceptable {
	return &DownloadFileNotAcceptable{}
}

/*
DownloadFileNotAcceptable describes a response with status code 406, with default header values.

The resource cannot be represented in the format that would be acceptable to the user agent
*/
type DownloadFileNotAcceptable struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download file not acceptable response has a 2xx status code
func (o *DownloadFileNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file not acceptable response has a 3xx status code
func (o *DownloadFileNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file not acceptable response has a 4xx status code
func (o *DownloadFileNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this download file not acceptable response has a 5xx status code
func (o *DownloadFileNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this download file not acceptable response a status code equal to that given
func (o *DownloadFileNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the download file not acceptable response
func (o *DownloadFileNotAcceptable) Code() int {
	return 406
}

func (o *DownloadFileNotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileNotAcceptable %s", 406, payload)
}

func (o *DownloadFileNotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileNotAcceptable %s", 406, payload)
}

func (o *DownloadFileNotAcceptable) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadFileNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadFileInternalServerError creates a DownloadFileInternalServerError with default headers values
func NewDownloadFileInternalServerError() *DownloadFileInternalServerError {
	return &DownloadFileInternalServerError{}
}

/*
DownloadFileInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type DownloadFileInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this download file internal server error response has a 2xx status code
func (o *DownloadFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download file internal server error response has a 3xx status code
func (o *DownloadFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download file internal server error response has a 4xx status code
func (o *DownloadFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download file internal server error response has a 5xx status code
func (o *DownloadFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download file internal server error response a status code equal to that given
func (o *DownloadFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download file internal server error response
func (o *DownloadFileInternalServerError) Code() int {
	return 500
}

func (o *DownloadFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileInternalServerError %s", 500, payload)
}

func (o *DownloadFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /files/{fileId}/file][%d] downloadFileInternalServerError %s", 500, payload)
}

func (o *DownloadFileInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DownloadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// UpdateAspectTypeVariableReader is a Reader for the UpdateAspectTypeVariable structure.
type UpdateAspectTypeVariableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAspectTypeVariableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateAspectTypeVariableNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAspectTypeVariableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAspectTypeVariableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAspectTypeVariableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAspectTypeVariableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateAspectTypeVariablePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAspectTypeVariableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateAspectTypeVariableServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /aspecttypes/{id}/variables] updateAspectTypeVariable", response, response.Code())
	}
}

// NewUpdateAspectTypeVariableNoContent creates a UpdateAspectTypeVariableNoContent with default headers values
func NewUpdateAspectTypeVariableNoContent() *UpdateAspectTypeVariableNoContent {
	return &UpdateAspectTypeVariableNoContent{}
}

/*
UpdateAspectTypeVariableNoContent describes a response with status code 204, with default header values.

The variable's has been updated
*/
type UpdateAspectTypeVariableNoContent struct {

	/* AspectType ETag value for further updates
	 */
	ETag int64
}

// IsSuccess returns true when this update aspect type variable no content response has a 2xx status code
func (o *UpdateAspectTypeVariableNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update aspect type variable no content response has a 3xx status code
func (o *UpdateAspectTypeVariableNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable no content response has a 4xx status code
func (o *UpdateAspectTypeVariableNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update aspect type variable no content response has a 5xx status code
func (o *UpdateAspectTypeVariableNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable no content response a status code equal to that given
func (o *UpdateAspectTypeVariableNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update aspect type variable no content response
func (o *UpdateAspectTypeVariableNoContent) Code() int {
	return 204
}

func (o *UpdateAspectTypeVariableNoContent) Error() string {
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableNoContent", 204)
}

func (o *UpdateAspectTypeVariableNoContent) String() string {
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableNoContent", 204)
}

func (o *UpdateAspectTypeVariableNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		valeTag, err := swag.ConvertInt64(hdrETag)
		if err != nil {
			return errors.InvalidType("ETag", "header", "int64", hdrETag)
		}
		o.ETag = valeTag
	}

	return nil
}

// NewUpdateAspectTypeVariableBadRequest creates a UpdateAspectTypeVariableBadRequest with default headers values
func NewUpdateAspectTypeVariableBadRequest() *UpdateAspectTypeVariableBadRequest {
	return &UpdateAspectTypeVariableBadRequest{}
}

/*
UpdateAspectTypeVariableBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UpdateAspectTypeVariableBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable bad request response has a 2xx status code
func (o *UpdateAspectTypeVariableBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable bad request response has a 3xx status code
func (o *UpdateAspectTypeVariableBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable bad request response has a 4xx status code
func (o *UpdateAspectTypeVariableBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type variable bad request response has a 5xx status code
func (o *UpdateAspectTypeVariableBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable bad request response a status code equal to that given
func (o *UpdateAspectTypeVariableBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update aspect type variable bad request response
func (o *UpdateAspectTypeVariableBadRequest) Code() int {
	return 400
}

func (o *UpdateAspectTypeVariableBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableBadRequest %s", 400, payload)
}

func (o *UpdateAspectTypeVariableBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableBadRequest %s", 400, payload)
}

func (o *UpdateAspectTypeVariableBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariableUnauthorized creates a UpdateAspectTypeVariableUnauthorized with default headers values
func NewUpdateAspectTypeVariableUnauthorized() *UpdateAspectTypeVariableUnauthorized {
	return &UpdateAspectTypeVariableUnauthorized{}
}

/*
UpdateAspectTypeVariableUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UpdateAspectTypeVariableUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable unauthorized response has a 2xx status code
func (o *UpdateAspectTypeVariableUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable unauthorized response has a 3xx status code
func (o *UpdateAspectTypeVariableUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable unauthorized response has a 4xx status code
func (o *UpdateAspectTypeVariableUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type variable unauthorized response has a 5xx status code
func (o *UpdateAspectTypeVariableUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable unauthorized response a status code equal to that given
func (o *UpdateAspectTypeVariableUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update aspect type variable unauthorized response
func (o *UpdateAspectTypeVariableUnauthorized) Code() int {
	return 401
}

func (o *UpdateAspectTypeVariableUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableUnauthorized %s", 401, payload)
}

func (o *UpdateAspectTypeVariableUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableUnauthorized %s", 401, payload)
}

func (o *UpdateAspectTypeVariableUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariableForbidden creates a UpdateAspectTypeVariableForbidden with default headers values
func NewUpdateAspectTypeVariableForbidden() *UpdateAspectTypeVariableForbidden {
	return &UpdateAspectTypeVariableForbidden{}
}

/*
UpdateAspectTypeVariableForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type UpdateAspectTypeVariableForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable forbidden response has a 2xx status code
func (o *UpdateAspectTypeVariableForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable forbidden response has a 3xx status code
func (o *UpdateAspectTypeVariableForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable forbidden response has a 4xx status code
func (o *UpdateAspectTypeVariableForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type variable forbidden response has a 5xx status code
func (o *UpdateAspectTypeVariableForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable forbidden response a status code equal to that given
func (o *UpdateAspectTypeVariableForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update aspect type variable forbidden response
func (o *UpdateAspectTypeVariableForbidden) Code() int {
	return 403
}

func (o *UpdateAspectTypeVariableForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableForbidden %s", 403, payload)
}

func (o *UpdateAspectTypeVariableForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableForbidden %s", 403, payload)
}

func (o *UpdateAspectTypeVariableForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariableNotFound creates a UpdateAspectTypeVariableNotFound with default headers values
func NewUpdateAspectTypeVariableNotFound() *UpdateAspectTypeVariableNotFound {
	return &UpdateAspectTypeVariableNotFound{}
}

/*
UpdateAspectTypeVariableNotFound describes a response with status code 404, with default header values.

Variable not found in Asset type
*/
type UpdateAspectTypeVariableNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable not found response has a 2xx status code
func (o *UpdateAspectTypeVariableNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable not found response has a 3xx status code
func (o *UpdateAspectTypeVariableNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable not found response has a 4xx status code
func (o *UpdateAspectTypeVariableNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type variable not found response has a 5xx status code
func (o *UpdateAspectTypeVariableNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable not found response a status code equal to that given
func (o *UpdateAspectTypeVariableNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update aspect type variable not found response
func (o *UpdateAspectTypeVariableNotFound) Code() int {
	return 404
}

func (o *UpdateAspectTypeVariableNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableNotFound %s", 404, payload)
}

func (o *UpdateAspectTypeVariableNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableNotFound %s", 404, payload)
}

func (o *UpdateAspectTypeVariableNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariablePreconditionFailed creates a UpdateAspectTypeVariablePreconditionFailed with default headers values
func NewUpdateAspectTypeVariablePreconditionFailed() *UpdateAspectTypeVariablePreconditionFailed {
	return &UpdateAspectTypeVariablePreconditionFailed{}
}

/*
UpdateAspectTypeVariablePreconditionFailed describes a response with status code 412, with default header values.

Aspect type or the variable has been changed in the background
*/
type UpdateAspectTypeVariablePreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable precondition failed response has a 2xx status code
func (o *UpdateAspectTypeVariablePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable precondition failed response has a 3xx status code
func (o *UpdateAspectTypeVariablePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable precondition failed response has a 4xx status code
func (o *UpdateAspectTypeVariablePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type variable precondition failed response has a 5xx status code
func (o *UpdateAspectTypeVariablePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type variable precondition failed response a status code equal to that given
func (o *UpdateAspectTypeVariablePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update aspect type variable precondition failed response
func (o *UpdateAspectTypeVariablePreconditionFailed) Code() int {
	return 412
}

func (o *UpdateAspectTypeVariablePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariablePreconditionFailed %s", 412, payload)
}

func (o *UpdateAspectTypeVariablePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariablePreconditionFailed %s", 412, payload)
}

func (o *UpdateAspectTypeVariablePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariablePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariableInternalServerError creates a UpdateAspectTypeVariableInternalServerError with default headers values
func NewUpdateAspectTypeVariableInternalServerError() *UpdateAspectTypeVariableInternalServerError {
	return &UpdateAspectTypeVariableInternalServerError{}
}

/*
UpdateAspectTypeVariableInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type UpdateAspectTypeVariableInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable internal server error response has a 2xx status code
func (o *UpdateAspectTypeVariableInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable internal server error response has a 3xx status code
func (o *UpdateAspectTypeVariableInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable internal server error response has a 4xx status code
func (o *UpdateAspectTypeVariableInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update aspect type variable internal server error response has a 5xx status code
func (o *UpdateAspectTypeVariableInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update aspect type variable internal server error response a status code equal to that given
func (o *UpdateAspectTypeVariableInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update aspect type variable internal server error response
func (o *UpdateAspectTypeVariableInternalServerError) Code() int {
	return 500
}

func (o *UpdateAspectTypeVariableInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableInternalServerError %s", 500, payload)
}

func (o *UpdateAspectTypeVariableInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableInternalServerError %s", 500, payload)
}

func (o *UpdateAspectTypeVariableInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeVariableServiceUnavailable creates a UpdateAspectTypeVariableServiceUnavailable with default headers values
func NewUpdateAspectTypeVariableServiceUnavailable() *UpdateAspectTypeVariableServiceUnavailable {
	return &UpdateAspectTypeVariableServiceUnavailable{}
}

/*
UpdateAspectTypeVariableServiceUnavailable describes a response with status code 503, with default header values.

Service unavailable, for more information see errorcode and message
*/
type UpdateAspectTypeVariableServiceUnavailable struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type variable service unavailable response has a 2xx status code
func (o *UpdateAspectTypeVariableServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type variable service unavailable response has a 3xx status code
func (o *UpdateAspectTypeVariableServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type variable service unavailable response has a 4xx status code
func (o *UpdateAspectTypeVariableServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update aspect type variable service unavailable response has a 5xx status code
func (o *UpdateAspectTypeVariableServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update aspect type variable service unavailable response a status code equal to that given
func (o *UpdateAspectTypeVariableServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the update aspect type variable service unavailable response
func (o *UpdateAspectTypeVariableServiceUnavailable) Code() int {
	return 503
}

func (o *UpdateAspectTypeVariableServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableServiceUnavailable %s", 503, payload)
}

func (o *UpdateAspectTypeVariableServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}/variables][%d] updateAspectTypeVariableServiceUnavailable %s", 503, payload)
}

func (o *UpdateAspectTypeVariableServiceUnavailable) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeVariableServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

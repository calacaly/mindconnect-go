// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// UpdateAspectTypeReader is a Reader for the UpdateAspectType structure.
type UpdateAspectTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAspectTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAspectTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAspectTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAspectTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAspectTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAspectTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdateAspectTypePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAspectTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /aspecttypes/{id}] updateAspectType", response, response.Code())
	}
}

// NewUpdateAspectTypeOK creates a UpdateAspectTypeOK with default headers values
func NewUpdateAspectTypeOK() *UpdateAspectTypeOK {
	return &UpdateAspectTypeOK{}
}

/*
UpdateAspectTypeOK describes a response with status code 200, with default header values.

The aspect type has been updated
*/
type UpdateAspectTypeOK struct {
	Payload *models.AspectTypeResource
}

// IsSuccess returns true when this update aspect type o k response has a 2xx status code
func (o *UpdateAspectTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update aspect type o k response has a 3xx status code
func (o *UpdateAspectTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type o k response has a 4xx status code
func (o *UpdateAspectTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update aspect type o k response has a 5xx status code
func (o *UpdateAspectTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type o k response a status code equal to that given
func (o *UpdateAspectTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update aspect type o k response
func (o *UpdateAspectTypeOK) Code() int {
	return 200
}

func (o *UpdateAspectTypeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeOK %s", 200, payload)
}

func (o *UpdateAspectTypeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeOK %s", 200, payload)
}

func (o *UpdateAspectTypeOK) GetPayload() *models.AspectTypeResource {
	return o.Payload
}

func (o *UpdateAspectTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AspectTypeResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeBadRequest creates a UpdateAspectTypeBadRequest with default headers values
func NewUpdateAspectTypeBadRequest() *UpdateAspectTypeBadRequest {
	return &UpdateAspectTypeBadRequest{}
}

/*
UpdateAspectTypeBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type UpdateAspectTypeBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type bad request response has a 2xx status code
func (o *UpdateAspectTypeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type bad request response has a 3xx status code
func (o *UpdateAspectTypeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type bad request response has a 4xx status code
func (o *UpdateAspectTypeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type bad request response has a 5xx status code
func (o *UpdateAspectTypeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type bad request response a status code equal to that given
func (o *UpdateAspectTypeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update aspect type bad request response
func (o *UpdateAspectTypeBadRequest) Code() int {
	return 400
}

func (o *UpdateAspectTypeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeBadRequest %s", 400, payload)
}

func (o *UpdateAspectTypeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeBadRequest %s", 400, payload)
}

func (o *UpdateAspectTypeBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeUnauthorized creates a UpdateAspectTypeUnauthorized with default headers values
func NewUpdateAspectTypeUnauthorized() *UpdateAspectTypeUnauthorized {
	return &UpdateAspectTypeUnauthorized{}
}

/*
UpdateAspectTypeUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type UpdateAspectTypeUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type unauthorized response has a 2xx status code
func (o *UpdateAspectTypeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type unauthorized response has a 3xx status code
func (o *UpdateAspectTypeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type unauthorized response has a 4xx status code
func (o *UpdateAspectTypeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type unauthorized response has a 5xx status code
func (o *UpdateAspectTypeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type unauthorized response a status code equal to that given
func (o *UpdateAspectTypeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update aspect type unauthorized response
func (o *UpdateAspectTypeUnauthorized) Code() int {
	return 401
}

func (o *UpdateAspectTypeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeUnauthorized %s", 401, payload)
}

func (o *UpdateAspectTypeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeUnauthorized %s", 401, payload)
}

func (o *UpdateAspectTypeUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeForbidden creates a UpdateAspectTypeForbidden with default headers values
func NewUpdateAspectTypeForbidden() *UpdateAspectTypeForbidden {
	return &UpdateAspectTypeForbidden{}
}

/*
UpdateAspectTypeForbidden describes a response with status code 403, with default header values.

User is not authorized for request
*/
type UpdateAspectTypeForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type forbidden response has a 2xx status code
func (o *UpdateAspectTypeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type forbidden response has a 3xx status code
func (o *UpdateAspectTypeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type forbidden response has a 4xx status code
func (o *UpdateAspectTypeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type forbidden response has a 5xx status code
func (o *UpdateAspectTypeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type forbidden response a status code equal to that given
func (o *UpdateAspectTypeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update aspect type forbidden response
func (o *UpdateAspectTypeForbidden) Code() int {
	return 403
}

func (o *UpdateAspectTypeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeForbidden %s", 403, payload)
}

func (o *UpdateAspectTypeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeForbidden %s", 403, payload)
}

func (o *UpdateAspectTypeForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeNotFound creates a UpdateAspectTypeNotFound with default headers values
func NewUpdateAspectTypeNotFound() *UpdateAspectTypeNotFound {
	return &UpdateAspectTypeNotFound{}
}

/*
UpdateAspectTypeNotFound describes a response with status code 404, with default header values.

AspectType not found
*/
type UpdateAspectTypeNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type not found response has a 2xx status code
func (o *UpdateAspectTypeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type not found response has a 3xx status code
func (o *UpdateAspectTypeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type not found response has a 4xx status code
func (o *UpdateAspectTypeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type not found response has a 5xx status code
func (o *UpdateAspectTypeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type not found response a status code equal to that given
func (o *UpdateAspectTypeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update aspect type not found response
func (o *UpdateAspectTypeNotFound) Code() int {
	return 404
}

func (o *UpdateAspectTypeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeNotFound %s", 404, payload)
}

func (o *UpdateAspectTypeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeNotFound %s", 404, payload)
}

func (o *UpdateAspectTypeNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypePreconditionFailed creates a UpdateAspectTypePreconditionFailed with default headers values
func NewUpdateAspectTypePreconditionFailed() *UpdateAspectTypePreconditionFailed {
	return &UpdateAspectTypePreconditionFailed{}
}

/*
UpdateAspectTypePreconditionFailed describes a response with status code 412, with default header values.

AspectType is changed in the background
*/
type UpdateAspectTypePreconditionFailed struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type precondition failed response has a 2xx status code
func (o *UpdateAspectTypePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type precondition failed response has a 3xx status code
func (o *UpdateAspectTypePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type precondition failed response has a 4xx status code
func (o *UpdateAspectTypePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this update aspect type precondition failed response has a 5xx status code
func (o *UpdateAspectTypePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this update aspect type precondition failed response a status code equal to that given
func (o *UpdateAspectTypePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the update aspect type precondition failed response
func (o *UpdateAspectTypePreconditionFailed) Code() int {
	return 412
}

func (o *UpdateAspectTypePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypePreconditionFailed %s", 412, payload)
}

func (o *UpdateAspectTypePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypePreconditionFailed %s", 412, payload)
}

func (o *UpdateAspectTypePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAspectTypeInternalServerError creates a UpdateAspectTypeInternalServerError with default headers values
func NewUpdateAspectTypeInternalServerError() *UpdateAspectTypeInternalServerError {
	return &UpdateAspectTypeInternalServerError{}
}

/*
UpdateAspectTypeInternalServerError describes a response with status code 500, with default header values.

Server error, for more information see errorcode and message
*/
type UpdateAspectTypeInternalServerError struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update aspect type internal server error response has a 2xx status code
func (o *UpdateAspectTypeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update aspect type internal server error response has a 3xx status code
func (o *UpdateAspectTypeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update aspect type internal server error response has a 4xx status code
func (o *UpdateAspectTypeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update aspect type internal server error response has a 5xx status code
func (o *UpdateAspectTypeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update aspect type internal server error response a status code equal to that given
func (o *UpdateAspectTypeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update aspect type internal server error response
func (o *UpdateAspectTypeInternalServerError) Code() int {
	return 500
}

func (o *UpdateAspectTypeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeInternalServerError %s", 500, payload)
}

func (o *UpdateAspectTypeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /aspecttypes/{id}][%d] updateAspectTypeInternalServerError %s", 500, payload)
}

func (o *UpdateAspectTypeInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateAspectTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

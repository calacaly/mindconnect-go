// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/calacaly/mindconnect-go/internal/api/assetmanagement/v3/models"
)

// NewUpdateAspectTypeParams creates a new UpdateAspectTypeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAspectTypeParams() *UpdateAspectTypeParams {
	return &UpdateAspectTypeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAspectTypeParamsWithTimeout creates a new UpdateAspectTypeParams object
// with the ability to set a timeout on a request.
func NewUpdateAspectTypeParamsWithTimeout(timeout time.Duration) *UpdateAspectTypeParams {
	return &UpdateAspectTypeParams{
		timeout: timeout,
	}
}

// NewUpdateAspectTypeParamsWithContext creates a new UpdateAspectTypeParams object
// with the ability to set a context for a request.
func NewUpdateAspectTypeParamsWithContext(ctx context.Context) *UpdateAspectTypeParams {
	return &UpdateAspectTypeParams{
		Context: ctx,
	}
}

// NewUpdateAspectTypeParamsWithHTTPClient creates a new UpdateAspectTypeParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAspectTypeParamsWithHTTPClient(client *http.Client) *UpdateAspectTypeParams {
	return &UpdateAspectTypeParams{
		HTTPClient: client,
	}
}

/*
UpdateAspectTypeParams contains all the parameters to send to the API endpoint

	for the update aspect type operation.

	Typically these are written to a http.Request.
*/
type UpdateAspectTypeParams struct {

	/* IfMatch.

	   Last known version to facilitate optimistic locking
	*/
	IfMatch string

	/* Aspecttype.

	   aspect type
	*/
	Aspecttype *models.AspectTypePatch

	/* ID.

	   The type's id is a unique identifier. The id's length must be between 1 and 128 characters and matches the following symbols "A-Z", "a-z", "0-9", "_" and "." beginning with the tenant prefix what has a maximum of 8 characters. (e.g . ten_pref.type_id)
	*/
	ID string

	/* IncludeShared.

	   Specifies if the operation should take into account shared (received) assets, aspects and asset types. Received resources are not visible in case includeShared=false. For query operations, received resources are not returned. Endpoints addressing individual resources respond with 404. In case received resources are referenced in a request parameter or property, they are treated as not existing.
	*/
	IncludeShared *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update aspect type params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAspectTypeParams) WithDefaults() *UpdateAspectTypeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update aspect type params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAspectTypeParams) SetDefaults() {
	var (
		includeSharedDefault = bool(false)
	)

	val := UpdateAspectTypeParams{
		IncludeShared: &includeSharedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update aspect type params
func (o *UpdateAspectTypeParams) WithTimeout(timeout time.Duration) *UpdateAspectTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update aspect type params
func (o *UpdateAspectTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update aspect type params
func (o *UpdateAspectTypeParams) WithContext(ctx context.Context) *UpdateAspectTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update aspect type params
func (o *UpdateAspectTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update aspect type params
func (o *UpdateAspectTypeParams) WithHTTPClient(client *http.Client) *UpdateAspectTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update aspect type params
func (o *UpdateAspectTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the update aspect type params
func (o *UpdateAspectTypeParams) WithIfMatch(ifMatch string) *UpdateAspectTypeParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update aspect type params
func (o *UpdateAspectTypeParams) SetIfMatch(ifMatch string) {
	o.IfMatch = ifMatch
}

// WithAspecttype adds the aspecttype to the update aspect type params
func (o *UpdateAspectTypeParams) WithAspecttype(aspecttype *models.AspectTypePatch) *UpdateAspectTypeParams {
	o.SetAspecttype(aspecttype)
	return o
}

// SetAspecttype adds the aspecttype to the update aspect type params
func (o *UpdateAspectTypeParams) SetAspecttype(aspecttype *models.AspectTypePatch) {
	o.Aspecttype = aspecttype
}

// WithID adds the id to the update aspect type params
func (o *UpdateAspectTypeParams) WithID(id string) *UpdateAspectTypeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update aspect type params
func (o *UpdateAspectTypeParams) SetID(id string) {
	o.ID = id
}

// WithIncludeShared adds the includeShared to the update aspect type params
func (o *UpdateAspectTypeParams) WithIncludeShared(includeShared *bool) *UpdateAspectTypeParams {
	o.SetIncludeShared(includeShared)
	return o
}

// SetIncludeShared adds the includeShared to the update aspect type params
func (o *UpdateAspectTypeParams) SetIncludeShared(includeShared *bool) {
	o.IncludeShared = includeShared
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAspectTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param If-Match
	if err := r.SetHeaderParam("If-Match", o.IfMatch); err != nil {
		return err
	}
	if o.Aspecttype != nil {
		if err := r.SetBodyParam(o.Aspecttype); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeShared != nil {

		// query param includeShared
		var qrIncludeShared bool

		if o.IncludeShared != nil {
			qrIncludeShared = *o.IncludeShared
		}
		qIncludeShared := swag.FormatBool(qrIncludeShared)
		if qIncludeShared != "" {

			if err := r.SetQueryParam("includeShared", qIncludeShared); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

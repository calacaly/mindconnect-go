// Code generated by go-swagger; DO NOT EDIT.

package aspecttype

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new aspecttype API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new aspecttype API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new aspecttype API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for aspecttype API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationMergePatchJSON sets the Content-Type header to "application/merge-patch+json".
func WithContentTypeApplicationMergePatchJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/merge-patch+json"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationHalJSON sets the Accept header to "application/hal+json".
func WithAcceptApplicationHalJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/hal+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndErrorJSON sets the Accept header to "application/vnd.error+json".
func WithAcceptApplicationVndErrorJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.error+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAspectType(params *DeleteAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAspectTypeNoContent, error)

	GetAspectType(params *GetAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAspectTypeOK, error)

	ListAspectTypes(params *ListAspectTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAspectTypesOK, error)

	SaveAspectType(params *SaveAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAspectTypeOK, *SaveAspectTypeCreated, error)

	UpdateAspectType(params *UpdateAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAspectTypeOK, error)

	UpdateAspectTypeVariable(params *UpdateAspectTypeVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAspectTypeVariableNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAspectType deletes aspect type

Delete an aspect type. Aspect type can only be deleted if there is no asset type using it.
*/
func (a *Client) DeleteAspectType(params *DeleteAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAspectTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAspectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAspectType",
		Method:             "DELETE",
		PathPattern:        "/aspecttypes/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAspectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAspectTypeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAspectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAspectType reads an aspect type

Read an aspect type.
*/
func (a *Client) GetAspectType(params *GetAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAspectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAspectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAspectType",
		Method:             "GET",
		PathPattern:        "/aspecttypes/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAspectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAspectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAspectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAspectTypes lists all aspect types

List all aspect types
*/
func (a *Client) ListAspectTypes(params *ListAspectTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAspectTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAspectTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAspectTypes",
		Method:             "GET",
		PathPattern:        "/aspecttypes",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAspectTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAspectTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAspectTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveAspectType creates or update an aspect type

Create or Update an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable, use PATCH /aspecttypes/{id}/variables api. Default value field is available only for static aspect variables and not on dynamic aspect variable. Aspect type description should not contain single quote character.
*/
func (a *Client) SaveAspectType(params *SaveAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SaveAspectTypeOK, *SaveAspectTypeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAspectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "saveAspectType",
		Method:             "PUT",
		PathPattern:        "/aspecttypes/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveAspectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveAspectTypeOK:
		return value, nil, nil
	case *SaveAspectTypeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for aspecttype: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAspectType patches an aspect type

Patch an aspect type. Only adding variables and restricted updates on variables is supported, like user can change unit details, can increase the length of a static STRING variable but length of a dynamic STRING variable cannot be changed. In order to rename or remove variable use PATCH /aspecttypes/{id}/variables api. Conforms to RFC 7396 - JSON merge Patch.
*/
func (a *Client) UpdateAspectType(params *UpdateAspectTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAspectTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAspectTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAspectType",
		Method:             "PATCH",
		PathPattern:        "/aspecttypes/{id}",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/merge-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAspectTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAspectTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAspectType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateAspectTypeVariable patches aspect type variables

	Updates an existing variable defined on an aspect type. Variables can be added, deleted and updated using this operation. Any variable which is not part of the request will remain unchanged. All variable names must be unique in a aspect type. This operation will increment the aspect type etag value.

<b>Following are the updates allowed on existing variables</b>
* Variable's Name, Length, Default Value and Unit can be changed.
* The unit changes from the api does not compute any value changes derived after the unit changes, the values will remain as it is and only the unit will be updated.
* The length can only be increased of a string variable and it cannot be decreased.
*/
func (a *Client) UpdateAspectTypeVariable(params *UpdateAspectTypeVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAspectTypeVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAspectTypeVariableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAspectTypeVariable",
		Method:             "PATCH",
		PathPattern:        "/aspecttypes/{id}/variables",
		ProducesMediaTypes: []string{"application/hal+json", "application/vnd.error+json"},
		ConsumesMediaTypes: []string{"application/merge-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAspectTypeVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAspectTypeVariableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAspectTypeVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Asset asset
//
// swagger:model Asset
type Asset struct {
	AssetUpdate

	// parent Id
	ParentID UniqueID `json:"parentId,omitempty"`

	// timezone
	Timezone Timezone `json:"timezone,omitempty"`

	// twin type
	TwinType *TwinType `json:"twinType,omitempty"`

	// type Id
	TypeID AssetTypeID `json:"typeId,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Asset) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AssetUpdate
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AssetUpdate = aO0

	// AO1
	var dataAO1 struct {
		ParentID UniqueID `json:"parentId,omitempty"`

		Timezone Timezone `json:"timezone,omitempty"`

		TwinType *TwinType `json:"twinType,omitempty"`

		TypeID AssetTypeID `json:"typeId,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ParentID = dataAO1.ParentID

	m.Timezone = dataAO1.Timezone

	m.TwinType = dataAO1.TwinType

	m.TypeID = dataAO1.TypeID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Asset) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AssetUpdate)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ParentID UniqueID `json:"parentId,omitempty"`

		Timezone Timezone `json:"timezone,omitempty"`

		TwinType *TwinType `json:"twinType,omitempty"`

		TypeID AssetTypeID `json:"typeId,omitempty"`
	}

	dataAO1.ParentID = m.ParentID

	dataAO1.Timezone = m.Timezone

	dataAO1.TwinType = m.TwinType

	dataAO1.TypeID = m.TypeID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this asset
func (m *Asset) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetUpdate
	if err := m.AssetUpdate.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwinType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Asset) validateParentID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentID) { // not required
		return nil
	}

	if err := m.ParentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parentId")
		}
		return err
	}

	return nil
}

func (m *Asset) validateTimezone(formats strfmt.Registry) error {

	if swag.IsZero(m.Timezone) { // not required
		return nil
	}

	if err := m.Timezone.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timezone")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timezone")
		}
		return err
	}

	return nil
}

func (m *Asset) validateTwinType(formats strfmt.Registry) error {

	if swag.IsZero(m.TwinType) { // not required
		return nil
	}

	if m.TwinType != nil {
		if err := m.TwinType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twinType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twinType")
			}
			return err
		}
	}

	return nil
}

func (m *Asset) validateTypeID(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeID) { // not required
		return nil
	}

	if err := m.TypeID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("typeId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this asset based on the context it is used
func (m *Asset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AssetUpdate
	if err := m.AssetUpdate.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimezone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTwinType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Asset) contextValidateParentID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ParentID) { // not required
		return nil
	}

	if err := m.ParentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parentId")
		}
		return err
	}

	return nil
}

func (m *Asset) contextValidateTimezone(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Timezone) { // not required
		return nil
	}

	if err := m.Timezone.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timezone")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timezone")
		}
		return err
	}

	return nil
}

func (m *Asset) contextValidateTwinType(ctx context.Context, formats strfmt.Registry) error {

	if m.TwinType != nil {

		if swag.IsZero(m.TwinType) { // not required
			return nil
		}

		if err := m.TwinType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twinType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twinType")
			}
			return err
		}
	}

	return nil
}

func (m *Asset) contextValidateTypeID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TypeID) { // not required
		return nil
	}

	if err := m.TypeID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("typeId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Asset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Asset) UnmarshalBinary(b []byte) error {
	var res Asset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package event_mappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/mindconnect/v3/models"
)

// PatchEventMappingsIDReader is a Reader for the PatchEventMappingsID structure.
type PatchEventMappingsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchEventMappingsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchEventMappingsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchEventMappingsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchEventMappingsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchEventMappingsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchEventMappingsIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchEventMappingsIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchEventMappingsIDOK creates a PatchEventMappingsIDOK with default headers values
func NewPatchEventMappingsIDOK() *PatchEventMappingsIDOK {
	return &PatchEventMappingsIDOK{}
}

/*
PatchEventMappingsIDOK describes a response with status code 200, with default header values.

OK
*/
type PatchEventMappingsIDOK struct {
	Payload *models.EventMappingOptional
}

// IsSuccess returns true when this patch event mappings Id o k response has a 2xx status code
func (o *PatchEventMappingsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch event mappings Id o k response has a 3xx status code
func (o *PatchEventMappingsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch event mappings Id o k response has a 4xx status code
func (o *PatchEventMappingsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch event mappings Id o k response has a 5xx status code
func (o *PatchEventMappingsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch event mappings Id o k response a status code equal to that given
func (o *PatchEventMappingsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch event mappings Id o k response
func (o *PatchEventMappingsIDOK) Code() int {
	return 200
}

func (o *PatchEventMappingsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdOK %s", 200, payload)
}

func (o *PatchEventMappingsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdOK %s", 200, payload)
}

func (o *PatchEventMappingsIDOK) GetPayload() *models.EventMappingOptional {
	return o.Payload
}

func (o *PatchEventMappingsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventMappingOptional)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEventMappingsIDBadRequest creates a PatchEventMappingsIDBadRequest with default headers values
func NewPatchEventMappingsIDBadRequest() *PatchEventMappingsIDBadRequest {
	return &PatchEventMappingsIDBadRequest{}
}

/*
PatchEventMappingsIDBadRequest describes a response with status code 400, with default header values.

Bad Request. Request validations failed.
*/
type PatchEventMappingsIDBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this patch event mappings Id bad request response has a 2xx status code
func (o *PatchEventMappingsIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch event mappings Id bad request response has a 3xx status code
func (o *PatchEventMappingsIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch event mappings Id bad request response has a 4xx status code
func (o *PatchEventMappingsIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch event mappings Id bad request response has a 5xx status code
func (o *PatchEventMappingsIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch event mappings Id bad request response a status code equal to that given
func (o *PatchEventMappingsIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch event mappings Id bad request response
func (o *PatchEventMappingsIDBadRequest) Code() int {
	return 400
}

func (o *PatchEventMappingsIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdBadRequest %s", 400, payload)
}

func (o *PatchEventMappingsIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdBadRequest %s", 400, payload)
}

func (o *PatchEventMappingsIDBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PatchEventMappingsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEventMappingsIDUnauthorized creates a PatchEventMappingsIDUnauthorized with default headers values
func NewPatchEventMappingsIDUnauthorized() *PatchEventMappingsIDUnauthorized {
	return &PatchEventMappingsIDUnauthorized{}
}

/*
PatchEventMappingsIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchEventMappingsIDUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this patch event mappings Id unauthorized response has a 2xx status code
func (o *PatchEventMappingsIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch event mappings Id unauthorized response has a 3xx status code
func (o *PatchEventMappingsIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch event mappings Id unauthorized response has a 4xx status code
func (o *PatchEventMappingsIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch event mappings Id unauthorized response has a 5xx status code
func (o *PatchEventMappingsIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch event mappings Id unauthorized response a status code equal to that given
func (o *PatchEventMappingsIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch event mappings Id unauthorized response
func (o *PatchEventMappingsIDUnauthorized) Code() int {
	return 401
}

func (o *PatchEventMappingsIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdUnauthorized %s", 401, payload)
}

func (o *PatchEventMappingsIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdUnauthorized %s", 401, payload)
}

func (o *PatchEventMappingsIDUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PatchEventMappingsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEventMappingsIDForbidden creates a PatchEventMappingsIDForbidden with default headers values
func NewPatchEventMappingsIDForbidden() *PatchEventMappingsIDForbidden {
	return &PatchEventMappingsIDForbidden{}
}

/*
PatchEventMappingsIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchEventMappingsIDForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this patch event mappings Id forbidden response has a 2xx status code
func (o *PatchEventMappingsIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch event mappings Id forbidden response has a 3xx status code
func (o *PatchEventMappingsIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch event mappings Id forbidden response has a 4xx status code
func (o *PatchEventMappingsIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch event mappings Id forbidden response has a 5xx status code
func (o *PatchEventMappingsIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch event mappings Id forbidden response a status code equal to that given
func (o *PatchEventMappingsIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch event mappings Id forbidden response
func (o *PatchEventMappingsIDForbidden) Code() int {
	return 403
}

func (o *PatchEventMappingsIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdForbidden %s", 403, payload)
}

func (o *PatchEventMappingsIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdForbidden %s", 403, payload)
}

func (o *PatchEventMappingsIDForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PatchEventMappingsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEventMappingsIDConflict creates a PatchEventMappingsIDConflict with default headers values
func NewPatchEventMappingsIDConflict() *PatchEventMappingsIDConflict {
	return &PatchEventMappingsIDConflict{}
}

/*
PatchEventMappingsIDConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchEventMappingsIDConflict struct {
	Payload *models.Errors
}

// IsSuccess returns true when this patch event mappings Id conflict response has a 2xx status code
func (o *PatchEventMappingsIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch event mappings Id conflict response has a 3xx status code
func (o *PatchEventMappingsIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch event mappings Id conflict response has a 4xx status code
func (o *PatchEventMappingsIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch event mappings Id conflict response has a 5xx status code
func (o *PatchEventMappingsIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch event mappings Id conflict response a status code equal to that given
func (o *PatchEventMappingsIDConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the patch event mappings Id conflict response
func (o *PatchEventMappingsIDConflict) Code() int {
	return 409
}

func (o *PatchEventMappingsIDConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdConflict %s", 409, payload)
}

func (o *PatchEventMappingsIDConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] patchEventMappingsIdConflict %s", 409, payload)
}

func (o *PatchEventMappingsIDConflict) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PatchEventMappingsIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEventMappingsIDDefault creates a PatchEventMappingsIDDefault with default headers values
func NewPatchEventMappingsIDDefault(code int) *PatchEventMappingsIDDefault {
	return &PatchEventMappingsIDDefault{
		_statusCode: code,
	}
}

/*
PatchEventMappingsIDDefault describes a response with status code -1, with default header values.

unexpected error
*/
type PatchEventMappingsIDDefault struct {
	_statusCode int

	Payload *models.Errors
}

// IsSuccess returns true when this patch event mappings ID default response has a 2xx status code
func (o *PatchEventMappingsIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch event mappings ID default response has a 3xx status code
func (o *PatchEventMappingsIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch event mappings ID default response has a 4xx status code
func (o *PatchEventMappingsIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch event mappings ID default response has a 5xx status code
func (o *PatchEventMappingsIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch event mappings ID default response a status code equal to that given
func (o *PatchEventMappingsIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch event mappings ID default response
func (o *PatchEventMappingsIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchEventMappingsIDDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] PatchEventMappingsID default %s", o._statusCode, payload)
}

func (o *PatchEventMappingsIDDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /eventMappings/{id}][%d] PatchEventMappingsID default %s", o._statusCode, payload)
}

func (o *PatchEventMappingsIDDefault) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PatchEventMappingsIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package event_mappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/mindconnect/v3/models"
)

// GetEventMappingsReader is a Reader for the GetEventMappings structure.
type GetEventMappingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventMappingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventMappingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEventMappingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEventMappingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEventMappingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEventMappingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEventMappingsOK creates a GetEventMappingsOK with default headers values
func NewGetEventMappingsOK() *GetEventMappingsOK {
	return &GetEventMappingsOK{}
}

/*
GetEventMappingsOK describes a response with status code 200, with default header values.

OK
*/
type GetEventMappingsOK struct {
	Payload *models.PagedEventMapping
}

// IsSuccess returns true when this get event mappings o k response has a 2xx status code
func (o *GetEventMappingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get event mappings o k response has a 3xx status code
func (o *GetEventMappingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event mappings o k response has a 4xx status code
func (o *GetEventMappingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get event mappings o k response has a 5xx status code
func (o *GetEventMappingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get event mappings o k response a status code equal to that given
func (o *GetEventMappingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get event mappings o k response
func (o *GetEventMappingsOK) Code() int {
	return 200
}

func (o *GetEventMappingsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsOK %s", 200, payload)
}

func (o *GetEventMappingsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsOK %s", 200, payload)
}

func (o *GetEventMappingsOK) GetPayload() *models.PagedEventMapping {
	return o.Payload
}

func (o *GetEventMappingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedEventMapping)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventMappingsBadRequest creates a GetEventMappingsBadRequest with default headers values
func NewGetEventMappingsBadRequest() *GetEventMappingsBadRequest {
	return &GetEventMappingsBadRequest{}
}

/*
GetEventMappingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetEventMappingsBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get event mappings bad request response has a 2xx status code
func (o *GetEventMappingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get event mappings bad request response has a 3xx status code
func (o *GetEventMappingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event mappings bad request response has a 4xx status code
func (o *GetEventMappingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get event mappings bad request response has a 5xx status code
func (o *GetEventMappingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get event mappings bad request response a status code equal to that given
func (o *GetEventMappingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get event mappings bad request response
func (o *GetEventMappingsBadRequest) Code() int {
	return 400
}

func (o *GetEventMappingsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsBadRequest %s", 400, payload)
}

func (o *GetEventMappingsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsBadRequest %s", 400, payload)
}

func (o *GetEventMappingsBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetEventMappingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventMappingsUnauthorized creates a GetEventMappingsUnauthorized with default headers values
func NewGetEventMappingsUnauthorized() *GetEventMappingsUnauthorized {
	return &GetEventMappingsUnauthorized{}
}

/*
GetEventMappingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetEventMappingsUnauthorized struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get event mappings unauthorized response has a 2xx status code
func (o *GetEventMappingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get event mappings unauthorized response has a 3xx status code
func (o *GetEventMappingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event mappings unauthorized response has a 4xx status code
func (o *GetEventMappingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get event mappings unauthorized response has a 5xx status code
func (o *GetEventMappingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get event mappings unauthorized response a status code equal to that given
func (o *GetEventMappingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get event mappings unauthorized response
func (o *GetEventMappingsUnauthorized) Code() int {
	return 401
}

func (o *GetEventMappingsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsUnauthorized %s", 401, payload)
}

func (o *GetEventMappingsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsUnauthorized %s", 401, payload)
}

func (o *GetEventMappingsUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetEventMappingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventMappingsForbidden creates a GetEventMappingsForbidden with default headers values
func NewGetEventMappingsForbidden() *GetEventMappingsForbidden {
	return &GetEventMappingsForbidden{}
}

/*
GetEventMappingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEventMappingsForbidden struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get event mappings forbidden response has a 2xx status code
func (o *GetEventMappingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get event mappings forbidden response has a 3xx status code
func (o *GetEventMappingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event mappings forbidden response has a 4xx status code
func (o *GetEventMappingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get event mappings forbidden response has a 5xx status code
func (o *GetEventMappingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get event mappings forbidden response a status code equal to that given
func (o *GetEventMappingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get event mappings forbidden response
func (o *GetEventMappingsForbidden) Code() int {
	return 403
}

func (o *GetEventMappingsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsForbidden %s", 403, payload)
}

func (o *GetEventMappingsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] getEventMappingsForbidden %s", 403, payload)
}

func (o *GetEventMappingsForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetEventMappingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventMappingsDefault creates a GetEventMappingsDefault with default headers values
func NewGetEventMappingsDefault(code int) *GetEventMappingsDefault {
	return &GetEventMappingsDefault{
		_statusCode: code,
	}
}

/*
GetEventMappingsDefault describes a response with status code -1, with default header values.

unexpected error
*/
type GetEventMappingsDefault struct {
	_statusCode int

	Payload *models.Errors
}

// IsSuccess returns true when this get event mappings default response has a 2xx status code
func (o *GetEventMappingsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get event mappings default response has a 3xx status code
func (o *GetEventMappingsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get event mappings default response has a 4xx status code
func (o *GetEventMappingsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get event mappings default response has a 5xx status code
func (o *GetEventMappingsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get event mappings default response a status code equal to that given
func (o *GetEventMappingsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get event mappings default response
func (o *GetEventMappingsDefault) Code() int {
	return o._statusCode
}

func (o *GetEventMappingsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] GetEventMappings default %s", o._statusCode, payload)
}

func (o *GetEventMappingsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /eventMappings][%d] GetEventMappings default %s", o._statusCode, payload)
}

func (o *GetEventMappingsDefault) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetEventMappingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

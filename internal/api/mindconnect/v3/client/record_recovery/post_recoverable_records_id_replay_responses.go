// Code generated by go-swagger; DO NOT EDIT.

package record_recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/mindconnect/v3/models"
)

// PostRecoverableRecordsIDReplayReader is a Reader for the PostRecoverableRecordsIDReplay structure.
type PostRecoverableRecordsIDReplayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRecoverableRecordsIDReplayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRecoverableRecordsIDReplayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostRecoverableRecordsIDReplayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostRecoverableRecordsIDReplayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostRecoverableRecordsIDReplayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRecoverableRecordsIDReplayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPostRecoverableRecordsIDReplayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostRecoverableRecordsIDReplayOK creates a PostRecoverableRecordsIDReplayOK with default headers values
func NewPostRecoverableRecordsIDReplayOK() *PostRecoverableRecordsIDReplayOK {
	return &PostRecoverableRecordsIDReplayOK{}
}

/*
PostRecoverableRecordsIDReplayOK describes a response with status code 200, with default header values.

OK
*/
type PostRecoverableRecordsIDReplayOK struct {
}

// IsSuccess returns true when this post recoverable records Id replay o k response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post recoverable records Id replay o k response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recoverable records Id replay o k response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post recoverable records Id replay o k response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post recoverable records Id replay o k response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post recoverable records Id replay o k response
func (o *PostRecoverableRecordsIDReplayOK) Code() int {
	return 200
}

func (o *PostRecoverableRecordsIDReplayOK) Error() string {
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayOK", 200)
}

func (o *PostRecoverableRecordsIDReplayOK) String() string {
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayOK", 200)
}

func (o *PostRecoverableRecordsIDReplayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRecoverableRecordsIDReplayBadRequest creates a PostRecoverableRecordsIDReplayBadRequest with default headers values
func NewPostRecoverableRecordsIDReplayBadRequest() *PostRecoverableRecordsIDReplayBadRequest {
	return &PostRecoverableRecordsIDReplayBadRequest{}
}

/*
PostRecoverableRecordsIDReplayBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostRecoverableRecordsIDReplayBadRequest struct {
	Payload *models.Badrequest
}

// IsSuccess returns true when this post recoverable records Id replay bad request response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recoverable records Id replay bad request response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recoverable records Id replay bad request response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recoverable records Id replay bad request response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post recoverable records Id replay bad request response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post recoverable records Id replay bad request response
func (o *PostRecoverableRecordsIDReplayBadRequest) Code() int {
	return 400
}

func (o *PostRecoverableRecordsIDReplayBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayBadRequest %s", 400, payload)
}

func (o *PostRecoverableRecordsIDReplayBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayBadRequest %s", 400, payload)
}

func (o *PostRecoverableRecordsIDReplayBadRequest) GetPayload() *models.Badrequest {
	return o.Payload
}

func (o *PostRecoverableRecordsIDReplayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Badrequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecoverableRecordsIDReplayUnauthorized creates a PostRecoverableRecordsIDReplayUnauthorized with default headers values
func NewPostRecoverableRecordsIDReplayUnauthorized() *PostRecoverableRecordsIDReplayUnauthorized {
	return &PostRecoverableRecordsIDReplayUnauthorized{}
}

/*
PostRecoverableRecordsIDReplayUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostRecoverableRecordsIDReplayUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this post recoverable records Id replay unauthorized response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recoverable records Id replay unauthorized response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recoverable records Id replay unauthorized response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recoverable records Id replay unauthorized response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post recoverable records Id replay unauthorized response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post recoverable records Id replay unauthorized response
func (o *PostRecoverableRecordsIDReplayUnauthorized) Code() int {
	return 401
}

func (o *PostRecoverableRecordsIDReplayUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayUnauthorized %s", 401, payload)
}

func (o *PostRecoverableRecordsIDReplayUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayUnauthorized %s", 401, payload)
}

func (o *PostRecoverableRecordsIDReplayUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *PostRecoverableRecordsIDReplayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecoverableRecordsIDReplayForbidden creates a PostRecoverableRecordsIDReplayForbidden with default headers values
func NewPostRecoverableRecordsIDReplayForbidden() *PostRecoverableRecordsIDReplayForbidden {
	return &PostRecoverableRecordsIDReplayForbidden{}
}

/*
PostRecoverableRecordsIDReplayForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostRecoverableRecordsIDReplayForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this post recoverable records Id replay forbidden response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recoverable records Id replay forbidden response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recoverable records Id replay forbidden response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recoverable records Id replay forbidden response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post recoverable records Id replay forbidden response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post recoverable records Id replay forbidden response
func (o *PostRecoverableRecordsIDReplayForbidden) Code() int {
	return 403
}

func (o *PostRecoverableRecordsIDReplayForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayForbidden %s", 403, payload)
}

func (o *PostRecoverableRecordsIDReplayForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayForbidden %s", 403, payload)
}

func (o *PostRecoverableRecordsIDReplayForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *PostRecoverableRecordsIDReplayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecoverableRecordsIDReplayNotFound creates a PostRecoverableRecordsIDReplayNotFound with default headers values
func NewPostRecoverableRecordsIDReplayNotFound() *PostRecoverableRecordsIDReplayNotFound {
	return &PostRecoverableRecordsIDReplayNotFound{}
}

/*
PostRecoverableRecordsIDReplayNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostRecoverableRecordsIDReplayNotFound struct {
	Payload *models.Notfound
}

// IsSuccess returns true when this post recoverable records Id replay not found response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post recoverable records Id replay not found response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post recoverable records Id replay not found response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post recoverable records Id replay not found response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post recoverable records Id replay not found response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post recoverable records Id replay not found response
func (o *PostRecoverableRecordsIDReplayNotFound) Code() int {
	return 404
}

func (o *PostRecoverableRecordsIDReplayNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayNotFound %s", 404, payload)
}

func (o *PostRecoverableRecordsIDReplayNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] postRecoverableRecordsIdReplayNotFound %s", 404, payload)
}

func (o *PostRecoverableRecordsIDReplayNotFound) GetPayload() *models.Notfound {
	return o.Payload
}

func (o *PostRecoverableRecordsIDReplayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Notfound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRecoverableRecordsIDReplayDefault creates a PostRecoverableRecordsIDReplayDefault with default headers values
func NewPostRecoverableRecordsIDReplayDefault(code int) *PostRecoverableRecordsIDReplayDefault {
	return &PostRecoverableRecordsIDReplayDefault{
		_statusCode: code,
	}
}

/*
PostRecoverableRecordsIDReplayDefault describes a response with status code -1, with default header values.

unexpected error
*/
type PostRecoverableRecordsIDReplayDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this post recoverable records ID replay default response has a 2xx status code
func (o *PostRecoverableRecordsIDReplayDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this post recoverable records ID replay default response has a 3xx status code
func (o *PostRecoverableRecordsIDReplayDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this post recoverable records ID replay default response has a 4xx status code
func (o *PostRecoverableRecordsIDReplayDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this post recoverable records ID replay default response has a 5xx status code
func (o *PostRecoverableRecordsIDReplayDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this post recoverable records ID replay default response a status code equal to that given
func (o *PostRecoverableRecordsIDReplayDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the post recoverable records ID replay default response
func (o *PostRecoverableRecordsIDReplayDefault) Code() int {
	return o._statusCode
}

func (o *PostRecoverableRecordsIDReplayDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] PostRecoverableRecordsIDReplay default %s", o._statusCode, payload)
}

func (o *PostRecoverableRecordsIDReplayDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /recoverableRecords/{id}/replay][%d] PostRecoverableRecordsIDReplay default %s", o._statusCode, payload)
}

func (o *PostRecoverableRecordsIDReplayDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostRecoverableRecordsIDReplayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

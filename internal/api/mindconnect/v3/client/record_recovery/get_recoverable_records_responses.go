// Code generated by go-swagger; DO NOT EDIT.

package record_recovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/calacaly/mindconnect-go/internal/api/mindconnect/v3/models"
)

// GetRecoverableRecordsReader is a Reader for the GetRecoverableRecords structure.
type GetRecoverableRecordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecoverableRecordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecoverableRecordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecoverableRecordsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecoverableRecordsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecoverableRecordsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRecoverableRecordsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRecoverableRecordsOK creates a GetRecoverableRecordsOK with default headers values
func NewGetRecoverableRecordsOK() *GetRecoverableRecordsOK {
	return &GetRecoverableRecordsOK{}
}

/*
GetRecoverableRecordsOK describes a response with status code 200, with default header values.

OK
*/
type GetRecoverableRecordsOK struct {
	Payload *models.PagedRecoverableRecords
}

// IsSuccess returns true when this get recoverable records o k response has a 2xx status code
func (o *GetRecoverableRecordsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recoverable records o k response has a 3xx status code
func (o *GetRecoverableRecordsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recoverable records o k response has a 4xx status code
func (o *GetRecoverableRecordsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recoverable records o k response has a 5xx status code
func (o *GetRecoverableRecordsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recoverable records o k response a status code equal to that given
func (o *GetRecoverableRecordsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get recoverable records o k response
func (o *GetRecoverableRecordsOK) Code() int {
	return 200
}

func (o *GetRecoverableRecordsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsOK %s", 200, payload)
}

func (o *GetRecoverableRecordsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsOK %s", 200, payload)
}

func (o *GetRecoverableRecordsOK) GetPayload() *models.PagedRecoverableRecords {
	return o.Payload
}

func (o *GetRecoverableRecordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedRecoverableRecords)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecoverableRecordsBadRequest creates a GetRecoverableRecordsBadRequest with default headers values
func NewGetRecoverableRecordsBadRequest() *GetRecoverableRecordsBadRequest {
	return &GetRecoverableRecordsBadRequest{}
}

/*
GetRecoverableRecordsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRecoverableRecordsBadRequest struct {
	Payload *models.Badrequest
}

// IsSuccess returns true when this get recoverable records bad request response has a 2xx status code
func (o *GetRecoverableRecordsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recoverable records bad request response has a 3xx status code
func (o *GetRecoverableRecordsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recoverable records bad request response has a 4xx status code
func (o *GetRecoverableRecordsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recoverable records bad request response has a 5xx status code
func (o *GetRecoverableRecordsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recoverable records bad request response a status code equal to that given
func (o *GetRecoverableRecordsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get recoverable records bad request response
func (o *GetRecoverableRecordsBadRequest) Code() int {
	return 400
}

func (o *GetRecoverableRecordsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsBadRequest %s", 400, payload)
}

func (o *GetRecoverableRecordsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsBadRequest %s", 400, payload)
}

func (o *GetRecoverableRecordsBadRequest) GetPayload() *models.Badrequest {
	return o.Payload
}

func (o *GetRecoverableRecordsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Badrequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecoverableRecordsUnauthorized creates a GetRecoverableRecordsUnauthorized with default headers values
func NewGetRecoverableRecordsUnauthorized() *GetRecoverableRecordsUnauthorized {
	return &GetRecoverableRecordsUnauthorized{}
}

/*
GetRecoverableRecordsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type GetRecoverableRecordsUnauthorized struct {
	Payload *models.Unauthorized
}

// IsSuccess returns true when this get recoverable records unauthorized response has a 2xx status code
func (o *GetRecoverableRecordsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recoverable records unauthorized response has a 3xx status code
func (o *GetRecoverableRecordsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recoverable records unauthorized response has a 4xx status code
func (o *GetRecoverableRecordsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recoverable records unauthorized response has a 5xx status code
func (o *GetRecoverableRecordsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recoverable records unauthorized response a status code equal to that given
func (o *GetRecoverableRecordsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get recoverable records unauthorized response
func (o *GetRecoverableRecordsUnauthorized) Code() int {
	return 401
}

func (o *GetRecoverableRecordsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsUnauthorized %s", 401, payload)
}

func (o *GetRecoverableRecordsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsUnauthorized %s", 401, payload)
}

func (o *GetRecoverableRecordsUnauthorized) GetPayload() *models.Unauthorized {
	return o.Payload
}

func (o *GetRecoverableRecordsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecoverableRecordsForbidden creates a GetRecoverableRecordsForbidden with default headers values
func NewGetRecoverableRecordsForbidden() *GetRecoverableRecordsForbidden {
	return &GetRecoverableRecordsForbidden{}
}

/*
GetRecoverableRecordsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRecoverableRecordsForbidden struct {
	Payload *models.Forbidden
}

// IsSuccess returns true when this get recoverable records forbidden response has a 2xx status code
func (o *GetRecoverableRecordsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recoverable records forbidden response has a 3xx status code
func (o *GetRecoverableRecordsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recoverable records forbidden response has a 4xx status code
func (o *GetRecoverableRecordsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recoverable records forbidden response has a 5xx status code
func (o *GetRecoverableRecordsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recoverable records forbidden response a status code equal to that given
func (o *GetRecoverableRecordsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get recoverable records forbidden response
func (o *GetRecoverableRecordsForbidden) Code() int {
	return 403
}

func (o *GetRecoverableRecordsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsForbidden %s", 403, payload)
}

func (o *GetRecoverableRecordsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] getRecoverableRecordsForbidden %s", 403, payload)
}

func (o *GetRecoverableRecordsForbidden) GetPayload() *models.Forbidden {
	return o.Payload
}

func (o *GetRecoverableRecordsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecoverableRecordsDefault creates a GetRecoverableRecordsDefault with default headers values
func NewGetRecoverableRecordsDefault(code int) *GetRecoverableRecordsDefault {
	return &GetRecoverableRecordsDefault{
		_statusCode: code,
	}
}

/*
GetRecoverableRecordsDefault describes a response with status code -1, with default header values.

unexpected error
*/
type GetRecoverableRecordsDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get recoverable records default response has a 2xx status code
func (o *GetRecoverableRecordsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get recoverable records default response has a 3xx status code
func (o *GetRecoverableRecordsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get recoverable records default response has a 4xx status code
func (o *GetRecoverableRecordsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get recoverable records default response has a 5xx status code
func (o *GetRecoverableRecordsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get recoverable records default response a status code equal to that given
func (o *GetRecoverableRecordsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get recoverable records default response
func (o *GetRecoverableRecordsDefault) Code() int {
	return o._statusCode
}

func (o *GetRecoverableRecordsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] GetRecoverableRecords default %s", o._statusCode, payload)
}

func (o *GetRecoverableRecordsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /recoverableRecords][%d] GetRecoverableRecords default %s", o._statusCode, payload)
}

func (o *GetRecoverableRecordsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRecoverableRecordsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

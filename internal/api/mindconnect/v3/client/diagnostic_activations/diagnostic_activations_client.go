// Code generated by go-swagger; DO NOT EDIT.

package diagnostic_activations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new diagnostic activations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new diagnostic activations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new diagnostic activations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for diagnostic activations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDiagnosticActivationsID(params *DeleteDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiagnosticActivationsIDNoContent, error)

	GetDiagnosticActivations(params *GetDiagnosticActivationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsOK, error)

	GetDiagnosticActivationsID(params *GetDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsIDOK, error)

	GetDiagnosticActivationsIDMessages(params *GetDiagnosticActivationsIDMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsIDMessagesOK, error)

	PostDiagnosticActivations(params *PostDiagnosticActivationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiagnosticActivationsCreated, error)

	PutDiagnosticActivationsID(params *PutDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDiagnosticActivationsIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDiagnosticActivationsID deletes a diagnostic activation

Delete a diagnostic activation. Agents are allowed to delete their own activation. Users with sufficient scopes are allowed to delete any activation in the same tenant as in the token.
*/
func (a *Client) DeleteDiagnosticActivationsID(params *DeleteDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDiagnosticActivationsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiagnosticActivationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDiagnosticActivationsID",
		Method:             "DELETE",
		PathPattern:        "/diagnosticActivations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDiagnosticActivationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDiagnosticActivationsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDiagnosticActivationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDiagnosticActivations gets diagnostic activations

Get diagnostic activations. Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get all activations in the same tenant as in the token.
*/
func (a *Client) GetDiagnosticActivations(params *GetDiagnosticActivationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiagnosticActivationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiagnosticActivations",
		Method:             "GET",
		PathPattern:        "/diagnosticActivations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiagnosticActivationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiagnosticActivationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDiagnosticActivationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDiagnosticActivationsID gets a diagnostic activation

Get a diagnostic activation with given id.  Agents are allowed to get their own activation. Users with sufficient scopes are allowed to get any activation in the same tenant as in the token.
*/
func (a *Client) GetDiagnosticActivationsID(params *GetDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiagnosticActivationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiagnosticActivationsID",
		Method:             "GET",
		PathPattern:        "/diagnosticActivations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiagnosticActivationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiagnosticActivationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDiagnosticActivationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDiagnosticActivationsIDMessages gets a diagnostic messages of specific activation resource

Get a diagnostic messages of specific activation resource. Agents are allowed to get their own activations' messages. Users with sufficient scopes are allowed to get any activations messages in the same tenant as in the token.
*/
func (a *Client) GetDiagnosticActivationsIDMessages(params *GetDiagnosticActivationsIDMessagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDiagnosticActivationsIDMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiagnosticActivationsIDMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiagnosticActivationsIDMessages",
		Method:             "GET",
		PathPattern:        "/diagnosticActivations/{id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiagnosticActivationsIDMessagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiagnosticActivationsIDMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDiagnosticActivationsIDMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	PostDiagnosticActivations creates a new diagnostic activation

	Create a new diagnostic activation.

Agents are allowed to create activation for itself only. Users with sufficient scopes are allowed to create activations of the agents in the same tenant as in the token.
*/
func (a *Client) PostDiagnosticActivations(params *PostDiagnosticActivationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDiagnosticActivationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDiagnosticActivationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDiagnosticActivations",
		Method:             "POST",
		PathPattern:        "/diagnosticActivations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDiagnosticActivationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDiagnosticActivationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDiagnosticActivationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PutDiagnosticActivationsID updates status of diagnostic activation

Updates status of Diagnostic Activation.
*/
func (a *Client) PutDiagnosticActivationsID(params *PutDiagnosticActivationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutDiagnosticActivationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDiagnosticActivationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDiagnosticActivationsID",
		Method:             "PUT",
		PathPattern:        "/diagnosticActivations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDiagnosticActivationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDiagnosticActivationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutDiagnosticActivationsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

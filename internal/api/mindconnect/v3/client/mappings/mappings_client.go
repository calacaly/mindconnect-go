// Code generated by go-swagger; DO NOT EDIT.

package mappings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new mappings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new mappings API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new mappings API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for mappings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDataPointMappingsID(params *DeleteDataPointMappingsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataPointMappingsIDNoContent, error)

	GetDataPointMappings(params *GetDataPointMappingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataPointMappingsOK, error)

	GetDataPointMappingsID(params *GetDataPointMappingsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataPointMappingsIDOK, error)

	PostDataPointMappings(params *PostDataPointMappingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDataPointMappingsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDataPointMappingsID deletes a mapping

Deletes a mapping.
*/
func (a *Client) DeleteDataPointMappingsID(params *DeleteDataPointMappingsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataPointMappingsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataPointMappingsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataPointMappingsID",
		Method:             "DELETE",
		PathPattern:        "/dataPointMappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataPointMappingsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataPointMappingsIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteDataPointMappingsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataPointMappings gets mappings

Retrieves a list of mappings.
*/
func (a *Client) GetDataPointMappings(params *GetDataPointMappingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataPointMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataPointMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataPointMappings",
		Method:             "GET",
		PathPattern:        "/dataPointMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataPointMappingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataPointMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataPointMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDataPointMappingsID gets a mapping by id

Gets a mapping by given id.
*/
func (a *Client) GetDataPointMappingsID(params *GetDataPointMappingsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataPointMappingsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataPointMappingsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataPointMappingsID",
		Method:             "GET",
		PathPattern:        "/dataPointMappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataPointMappingsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataPointMappingsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataPointMappingsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PostDataPointMappings creates single mapping

Creates a single mapping.
*/
func (a *Client) PostDataPointMappings(params *PostDataPointMappingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDataPointMappingsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDataPointMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDataPointMappings",
		Method:             "POST",
		PathPattern:        "/dataPointMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDataPointMappingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDataPointMappingsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDataPointMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
